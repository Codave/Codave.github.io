<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未来可期</title>
  
  <subtitle>技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codave.github.io/"/>
  <updated>2019-04-26T06:52:40.164Z</updated>
  <id>https://codave.github.io/</id>
  
  <author>
    <name>Codave</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++语法12-多重继承</title>
    <link href="https://codave.github.io/2019/04/25/C++%E8%AF%AD%E6%B3%9512-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/"/>
    <id>https://codave.github.io/2019/04/25/C++语法12-多重继承/</id>
    <published>2019-04-25T08:41:09.000Z</published>
    <updated>2019-04-26T06:52:40.164Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>派生类只有一个基类，这种派生方法称为单继承或单基派生。当一个派生类具有两个或多个基类时，这种派生方法称为多重继承或多基派生。</p></blockquote><h1 id="1-多重继承派生类的声明"><a href="#1-多重继承派生类的声明" class="headerlink" title="1. 多重继承派生类的声明"></a>1. 多重继承派生类的声明</h1><p>在C++中，声明具有两个以上基类的派生类与声明单基派生类的形式相似，只需将要继承的多个基类用逗号分隔即可，其声明的一般形式如下：</p><p><strong>class   派生类名：继承方式1   基类名1，…… ，继承方式n   基类名n{</strong></p><p>​    <strong>派生类新增的数据成员和成员函数</strong></p><p><strong>}；</strong></p><p>注意：对基类成员的访问必须是无二义性的，例如下列程序段对基类成员的访问是二义性的，必须想办法消除二义性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clas X&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span>:</span><span class="keyword">public</span> X,<span class="keyword">public</span> Y&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果定义类Z的对象obj：</p><p>Z  obj;</p><p>则以下对函数f()的访问是二义性的：</p><p>obj.f();            //二义性错误，不知调用的是类X的f(),还是类Y的f()</p><p>使用成员名限定可以消除二义性，例如：</p><p>obj.X::f();        //调用类X的f()</p><p>obj.Y::f();            //调用类Y的f()</p><h1 id="2-多重继承派生类的构造函数与析构函数"><a href="#2-多重继承派生类的构造函数与析构函数" class="headerlink" title="2. 多重继承派生类的构造函数与析构函数"></a>2. 多重继承派生类的构造函数与析构函数</h1><p>多重继承下派生类构造函数的定义形式与单继承派生类构造函数的定义形式相似，只是n个基类的构造函数之间用逗号分隔。多重继承下派生类构造函数定义的一般形式如下：</p><p><strong>派生类名（参数总表）：基类名1（参数表1），基类名2（参数表2），…… , 基类名n（参数名n）{</strong></p><p>​        <strong>派生类新增成员的初始化语句</strong></p><p><strong>}</strong></p><p>派生类的参数个数必须包含完成所有基类初始化所需的参数个数。</p><p>多重继承的构造函数的执行顺序与单继承构造函数的执行顺序相同，也是遵循先执行基类的构造函数，再执行对象成员的构造函数，最后执行派生类构造函数的原则。在多个基类之间，则严格按照派生类声明时从左向右的顺序来排列先后。</p><p>由于析构函数是不带参数的，在派生类中是否要定义析构函数与它所属的基类无关，所以与单继承情况类似，基类的析构函数不会因为派生类没有析构函数而得不到执行，他们各自是独立的。析构函数和构造函数的执行顺序正好是相反的。</p><h1 id="3-虚基类"><a href="#3-虚基类" class="headerlink" title="3. 虚基类"></a>3. 虚基类</h1><p>如果一个类有多个直接基类，而这些直接基类又有一个共同的基类，则在最低层的派生类中会保留这个间接的共同基类数据成员的多份同名成员。在访问这些同名的成员时，必须在派生类对象名后面增加直接基类名，使其惟一的标识一个成员，以免产生二义性。</p><h1 id="3-1-虚基类的概念"><a href="#3-1-虚基类的概念" class="headerlink" title="3.1 虚基类的概念"></a>3.1 虚基类的概念</h1><p>在C++中，如果想使这个公共的基类只产生一个复制，则可以将这个基类说明成虚基类。这就要求从类 Base派生新类时，使用关键字virtual将类Base说明成虚基类。</p><p>虚基类在派生类中的声明，其语法形式如下：</p><p><strong>Class   派生类名： virtual  继承方式    基类名{</strong></p><p><strong>……</strong></p><p><strong>}</strong></p><p>经过这样的声明后，当基类通过多条派生路径被一个派生类继承时，该派生类只继承该基类一次，也就是说，基类成员只保留一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">虚基类的使用</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base a="</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//a=5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> b1;</span><br><span class="line">    Base1()&#123;</span><br><span class="line">        a=a+<span class="number">10</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base1 a="</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//a=15</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> b2;</span><br><span class="line">    Base2()&#123;</span><br><span class="line">        a=a+<span class="number">20</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base2 a="</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//a=35</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    Derived()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derived a="</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//a=35</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Derived obj;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-2-虚基类的初始化"><a href="#3-2-虚基类的初始化" class="headerlink" title="3.2 虚基类的初始化"></a>3.2 虚基类的初始化</h1><p>虚基类的初始化与一般的多继承的初始化在语法上是一样的，但构造函数的调用顺序不同。在使用虚基类机制时应该注意一下几点：</p><p>（1）如果在虚基类中定义有带形参的构造函数，并且没有定义默认形式的构造函数，则整个继承结构中，所有直接或间接的派生类都必须在构造函数的成员初始化列表中列出对虚函数类构造函数的调用，以初始化在虚基类中定义的数据成员。</p><p>（2）建立一个对象时，如果这个对象中含有从虚基类继承来的成员，则虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的。该派生类的其他基类对虚基类构造函数的调用都自动被忽略。</p><p>（3）若同一层次中同时包含虚基类和非虚基类，应先调用虚基类中的构造函数，再调用非虚基类的构造函数，最后调用派生类构造函数。</p><p>（4）对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</p><p>（5）对于非虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</p><p>（6）若虚基类由非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">虚基类的派生类构造函数的执行顺序。</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Base(<span class="keyword">int</span> sa)&#123;</span><br><span class="line">            a=sa;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Coustructing Base"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Base1(<span class="keyword">int</span> sa,<span class="keyword">int</span> sb):Base(sa)&#123;</span><br><span class="line">            b=sb;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructing Base1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Base2(<span class="keyword">int</span> sa,<span class="keyword">int</span> sc)&#123;</span><br><span class="line">            c=sc;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructing Base2"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Derived(<span class="keyword">int</span> sa,<span class="keyword">int</span> sb,<span class="keyword">int</span> sc,<span class="keyword">int</span> sd):</span><br><span class="line">        Base(sa),Base1(sa,sb),Base2(sa,sc)&#123;</span><br><span class="line">            d=sd;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructing Derived"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">obj</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">程序运行结果：</span><br><span class="line">Coustructing Base</span><br><span class="line">Constructing Base1</span><br><span class="line">Constructing Base2</span><br><span class="line">Constructing Derived</span><br></pre></td></tr></table></figure><p>不难看出，上述程序中虚基类Base的构造函数只执行了一次。显然，当Derived的构造函数调用了虚基类Base的构造函数之后，类Base1和类Base2对Base构造函数的调用被忽略了。这也是初始化虚基类和初始化非虚基类不同的地方。</p><p>说明：</p><p>（1）关键字virtual与派生方式关键字（public或private）的先后顺序无关紧要，它只说明是“虚拟派生”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> <span class="keyword">virtual</span> Base&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br><span class="line">这两个虚拟派生的声明是等价的。</span><br></pre></td></tr></table></figure><p>（2）一个基类在作为某些派生类虚基类的同时，又作为另一些派生类的非虚基类，这种情况是允许的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;派生类只有一个基类，这种派生方法称为单继承或单基派生。当一个派生类具有两个或多个基类时，这种派生方法称为多重继承或多基派生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-多重继承派生类的声明&quot;&gt;&lt;a href=&quot;#1-多重继承派生类的声
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="多重继承" scheme="https://codave.github.io/tags/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++语法11-调整基类成员在派生类中的访问属性的其他方法</title>
    <link href="https://codave.github.io/2019/04/24/C++%E8%AF%AD%E6%B3%9511-%E8%B0%83%E6%95%B4%E5%9F%BA%E7%B1%BB%E6%88%90%E5%91%98%E5%9C%A8%E6%B4%BE%E7%94%9F%E7%B1%BB%E4%B8%AD%E7%9A%84%E8%AE%BF%E9%97%AE%E5%B1%9E%E6%80%A7%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/"/>
    <id>https://codave.github.io/2019/04/24/C++语法11-调整基类成员在派生类中的访问属性的其他方法/</id>
    <published>2019-04-24T13:27:03.000Z</published>
    <updated>2019-04-25T08:40:18.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-同名成员"><a href="#1-同名成员" class="headerlink" title="1. 同名成员"></a>1. 同名成员</h1><p>在定义派生类的时候，C++语言允许在派生类中说明的成员与基类中的成员名字相同，也就是说，派生类可以重新说明与基类成员同名的成员。如果在派生类中定义了与基类成员同名的成员，则称派生类成员覆盖了基类的同名成员，在派生类中使用这个名字意味着访问在派生类中重新说明的成员。为了在派生类中使用基类的同名成员，必须在该成员名之前加上基类名和作用域标示符”::”，即必须使用如下格式才能访问到基类的同名成员。</p><p><strong>基类名::成员名</strong></p><h1 id="2-访问声明"><a href="#2-访问声明" class="headerlink" title="2. 访问声明"></a>2. 访问声明</h1><p>我们已经知道，对于公有继承，基类的公有成员函数也就是派生类的公有成员函数，这意味着外界可以用派生类的对象调用基类的公有成员函数。但是对于私有继承，基类的公有成员函数变成了派生类的私有成员函数了。这是 外界就无法利用派生类的对象直接调用基类的成员函数，而只能通过调用派生类的成员函数（内含调用基类成员函数的语句）间接地调用基类的成员函数。</p><p>访问声明的方法就是把基类的保护成员或公有成员直接写至私有派生类定义式中的同名段中，同时给成员名前冠以基类名和作用域标示符 :: 。利用这种方法，该成员就成为派生类的保护类或公有成员了。</p><p>说明：</p><p>（1）数据成员也可以使用访问声明。</p><p>（2）访问声明中只含不带类型和参数的函数或变量名。</p><p>（3）访问声明不能改变成员在基类中的访问属性，也就是说，访问声明只能把原基类的保护成员调整为私有派生类的保护成员，把原基类的公有成员调整为私有派生类的公有成员。但是对基类的私有成员不能使用访问声明。</p><p>（4）对于基类中的重载函数名，访问声明将对基类中所有同名函数起作用。这意味着对于重载函数使用访问声明时要慎重。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-同名成员&quot;&gt;&lt;a href=&quot;#1-同名成员&quot; class=&quot;headerlink&quot; title=&quot;1. 同名成员&quot;&gt;&lt;/a&gt;1. 同名成员&lt;/h1&gt;&lt;p&gt;在定义派生类的时候，C++语言允许在派生类中说明的成员与基类中的成员名字相同，也就是说，派生类可以重新说
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="同名成员" scheme="https://codave.github.io/tags/%E5%90%8C%E5%90%8D%E6%88%90%E5%91%98/"/>
    
      <category term="访问声明" scheme="https://codave.github.io/tags/%E8%AE%BF%E9%97%AE%E5%A3%B0%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>C++语法10-派生类的构造和析构</title>
    <link href="https://codave.github.io/2019/04/22/C++%E8%AF%AD%E6%B3%9510-%E6%B4%BE%E7%94%9F%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>https://codave.github.io/2019/04/22/C++语法10-派生类的构造和析构/</id>
    <published>2019-04-22T04:54:34.000Z</published>
    <updated>2019-04-24T13:18:10.680Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>派生类继承了基类的成员，实现了原有代码的重用，这仅仅是引入继承的目的之一。引入继承的更主要的目的是代码的扩充，只有在派生类中通过添加新的成员，加入新的功能，类的派生才更有意义。<strong>但是基类的构造函数和析构函数不能被继承，在派生类中，如果对派生类新增的成员进行初始化，就需要加入派生类的构造函数。</strong>与此同时，对所有从基类继承下来的成员的初始化工作，还是由基类的构造函数完成的，但是我们必须在派生类中对基类的构造函数所需要的参数进行设置。同样，对撤销派生类对象时的扫尾、清理工作也需要加入新的析构函数来完成。</p></blockquote><h1 id="1-派生类构造函数和析构函数的执行顺序"><a href="#1-派生类构造函数和析构函数的执行顺序" class="headerlink" title="1. 派生类构造函数和析构函数的执行顺序"></a>1. 派生类构造函数和析构函数的执行顺序</h1><p>通常情况下，当创建派生类的对象时，首先执行基类的构造函数，随后再执行派生类的构造函数；当撤销派生类对象时，则先执行派生类的析构函数，随后再执行基类的析构函数。</p><h1 id="2-派生类构造函数和析构函数的构造规则"><a href="#2-派生类构造函数和析构函数的构造规则" class="headerlink" title="2. 派生类构造函数和析构函数的构造规则"></a>2. 派生类构造函数和析构函数的构造规则</h1><h1 id="2-1-简单的派生类的构造函数"><a href="#2-1-简单的派生类的构造函数" class="headerlink" title="2.1 简单的派生类的构造函数"></a>2.1 简单的派生类的构造函数</h1><p>当基类的构造函数没有参数，或没有显示定义构造函数时，派生类可以不向基类传递参数，甚至可以不定义构造函数。<strong>当基类含有带参数的构造函数时，派生类必须定义构造函数，以提供把参数传递给基类构造函数的途径。</strong></p><p>在C++中，派生类构造函数的一般格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">派生类名（总参数表）：基类名（参数表）&#123;</span><br><span class="line">  </span><br><span class="line">    派生类新增数据成员的初始化语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的程序说明如何传递一个参数给派生类的构造函数和传递一个参数给基类的构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span><span class="comment">//声明基类Student</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Student(<span class="keyword">int</span> number1,<span class="built_in">string</span> name1,<span class="keyword">float</span> score1)&#123;<span class="comment">//基类构造函数</span></span><br><span class="line">            number=number1;</span><br><span class="line">            name=name1;</span><br><span class="line">            score=score1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"number:"</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"name:"</span>&lt;&lt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"score:"</span>&lt;&lt;score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">int</span> number;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UStudent</span>:</span><span class="keyword">public</span> Student&#123;<span class="comment">//声明公有派生类Ustudent</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        UStudent(<span class="keyword">int</span> number1,<span class="built_in">string</span> name1,<span class="keyword">float</span> score1,<span class="built_in">string</span> major1)</span><br><span class="line">        :Student(number1,name1,score1)<span class="comment">//定义派生类构造函数要加上调用的基类的构造函数及其参数</span></span><br><span class="line">        &#123;</span><br><span class="line">            major=major1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            print();</span><br><span class="line">            count&lt;&lt;<span class="string">"major:"</span>&lt;&lt;major&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>：</span><br><span class="line">        <span class="built_in">string</span> major;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    UStudent stu(22116,"张志"，95，"信息安全")；</span><br><span class="line">    stu.print();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>（1）可以将派生类构造函数定义在类的外部，而在类体内只写该函数的声明。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UStudent(<span class="keyword">int</span> number1,<span class="built_in">string</span> name1,<span class="keyword">float</span> score1,<span class="built_in">string</span> major1);</span><br></pre></td></tr></table></figure><p>而在类的外部定义派生类的构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UStudent::UStudent(<span class="keyword">int</span> number1,<span class="built_in">string</span> name1,<span class="keyword">float</span> score1,<span class="built_in">string</span> major1)</span><br><span class="line">:Student(number1,name1,score1)<span class="comment">//定义派生类构造函数要加上调用的基类的构造函数及其参数</span></span><br><span class="line">&#123;</span><br><span class="line">major=major1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在类中声明派生类构造函数时，不包括基类构造函数名及其参数表(即Student(number1,name1,score1))，只在类外定义构造函数时才将它列出。</p><p>（2）若在类使用默认构造函数或不带参数的构造函数，则在派生类中定义构造函数时可略去”：基类名（参数表）”，此时若派生类不需要构造函数，则可不定义派生类构造函数。</p><p>（3）当基类构造函数不带参数时，派生类不一定需要定义构造函数，然后当基类的构造函数哪怕只带有一个参数，它所有的派生类都必须定义构造函数，甚至所定义的派生类构造函数的函数体可能为空，仅仅起参数的传递作用。</p><h1 id="2-2-派生类的析构函数"><a href="#2-2-派生类的析构函数" class="headerlink" title="2.2 派生类的析构函数"></a>2.2 派生类的析构函数</h1><blockquote><p>在派生类中可以根据需要定义自己的析构函数，用来对派生类中的所增加的成员进行清理工作。基类的清理工作仍然由基类的析构函数负责。由于析构函数是不带参数的，在派生系统中是否要自定义析构函数与它所属基类的析构函数无关。在执行派生类的析构函数时，系统会自动调用基类的析构函数，对基类的对象进行清理工作。</p></blockquote><h1 id="2-3-含有对象成员（子对象）的派生类的构造函数"><a href="#2-3-含有对象成员（子对象）的派生类的构造函数" class="headerlink" title="2.3 含有对象成员（子对象）的派生类的构造函数"></a>2.3 含有对象成员（子对象）的派生类的构造函数</h1><p>当派生类中含有内嵌的对象成员（也称子对象）时，其构造函数的一般形式为：</p><p><strong>派生类名（参数总表）：基类名（参数表0），对象成员名1（参数表1），……，对象成员名n（参数表n）</strong>{</p><p>​    <strong>派生类新增成员的初始化语句；</strong></p><p><strong>}</strong></p><p>在定义派生类对象时，构造函数的执行顺序如下：</p><ul><li>调用基类的构造函数，对基类数据成员初始化；</li><li>调用内嵌对象成员的构造函数，对内嵌对象成员的数据成员初始化；</li><li>执行派生类的构造函数体，对派生类数据成员初始化。</li></ul><p>撤销对象时，析构函数的调用顺序与构造函数的调用顺序正好相反。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Base(<span class="keyword">int</span> i)&#123;</span><br><span class="line">            x=i;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Constrcting base class\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~Base()&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructing base class\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"x="</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Derived(<span class="keyword">int</span> i):Base(i),d(i)<span class="comment">//缀上要调用的基类构造函数和对象成员构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructing derived class\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Derived()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructing derived class\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    Base d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">obj</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    obj.show();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>（1）在派生类中含有多个内嵌对象成员时，调用内嵌对象成员的构造函数顺序由它们在类中声明的顺序确定。</p><p>（2）如果派生类的基类也是一个派生类，每个派生类只需要负责其直接基类数据成员的初始化。依次上溯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;派生类继承了基类的成员，实现了原有代码的重用，这仅仅是引入继承的目的之一。引入继承的更主要的目的是代码的扩充，只有在派生类中通过添加新的成员，加入新的功能，类的派生才更有意义。&lt;strong&gt;但是基类的构造函数和析构函数不能被继承，在派生类中，如果
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="构造函数" scheme="https://codave.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="析构函数" scheme="https://codave.github.io/tags/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
      <category term="派生类" scheme="https://codave.github.io/tags/%E6%B4%BE%E7%94%9F%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++语法09-派生类的概念</title>
    <link href="https://codave.github.io/2019/04/21/C++%E8%AF%AD%E6%B3%9509-%E6%B4%BE%E7%94%9F%E7%B1%BB%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>https://codave.github.io/2019/04/21/C++语法09-派生类的概念/</id>
    <published>2019-04-21T13:24:59.000Z</published>
    <updated>2019-04-22T04:50:41.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-派生类的声明"><a href="#1-派生类的声明" class="headerlink" title="1. 派生类的声明"></a>1. 派生类的声明</h1><p>声明一个派生类的一般格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class 派生类名：[继承方式]  基类名&#123;</span><br><span class="line">    派生类新增的数据成员和成员函数</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>如果不显示地给出继承方式关键字，系统默认为私有继承（private)。</p><h1 id="2-基类成员在派生类中的访问属性"><a href="#2-基类成员在派生类中的访问属性" class="headerlink" title="2. 基类成员在派生类中的访问属性"></a>2. 基类成员在派生类中的访问属性</h1><p>派生类可以继承基类中除了构造函数与析构函数之外的成员，但是这些成员的访问属性在派生过程中是可以调整的。从基类继承来的成员在派生类中的访问属性是由继承方式控制的。</p><table><thead><tr><th>基类中的成员</th><th>在公有派生类中的访问属性</th><th>在私有派生类中的访问属性</th><th>在保护派生类中的访问属性</th></tr></thead><tbody><tr><td>私有成员</td><td>不可直接访问</td><td>不可直接访问</td><td>不可直接访问</td></tr><tr><td>公有成员</td><td>公有</td><td>私有</td><td>保护</td></tr><tr><td>保护成员</td><td>保护</td><td>私有</td><td>保护</td></tr></tbody></table><p>从上表中可以归纳出以下几点：</p><p>（1）基类中的私有成员</p><p>​    <strong>无论哪种继承方式，基类中的私有成员不允许派生类继承，即在派生类中是不可直接访问的</strong>。</p><p>（2）基类中的公有成员</p><p>​    当类的继承方式为公有继承时，基类中的所有公有成员在派生类中仍以公有成员的身份出现。</p><p>​    当类的继承方式为私有继承时，基类中的所有公有成员在派生类中仍以私有成员的身份出现。</p><p>​    当类的继承方式为保护继承时，基类中的所有公有成员在派生类中仍以保护成员的身份出现。</p><p>（3）基类中的保护成员</p><p>​    当类的继承方式为公有继承时，基类中的所有保护成员在派生类中仍以保护成员的身份出现。</p><p>​    当类的继承方式为私有继承时，基类中的所有保护成员在派生类中仍以私有成员的身份出现。</p><p>​    当类的继承方式为保护继承时，基类中的所有保护成员在派生类中仍以保护成员的身份出现。</p><h1 id="3-派生类对基类成员的访问规则"><a href="#3-派生类对基类成员的访问规则" class="headerlink" title="3. 派生类对基类成员的访问规则"></a>3. 派生类对基类成员的访问规则</h1><p>派生类对基类成员的访问形式主要有以下两种：</p><p>（1）内部访问。由派生类中新增的成员函数对基类继承来的成员的访问</p><p>（2）对象访问。由派生类外部，通过派生类的对象对从基类继承来的成员的访问。</p><h1 id="3-1-私有继承的访问规则"><a href="#3-1-私有继承的访问规则" class="headerlink" title="3.1 私有继承的访问规则"></a>3.1 私有继承的访问规则</h1><table><thead><tr><th>基类中的成员</th><th>私有成员</th><th>公有成员</th><th>保护成员</th></tr></thead><tbody><tr><td>内部访问</td><td>不可访问</td><td>可访问</td><td>可访问</td></tr><tr><td>对象访问</td><td>不可访问</td><td>不可访问</td><td>不可访问</td></tr></tbody></table><p>说明：</p><p>（1）基类中的私有成员在被私有继承时既不能被派生类的对象访问，也不能被派生类的成员函数访问，只能被基类自己的成员函数访问。因此，我们在设计积累时，总要为它的私有数据成员提供公有成员函数，如成员函数showx等，以便使派生类可以间接访问这些数据成员。</p><p>（2）经历了私有继承之后，所有基类的成员都成为了派生类的私有成员或不可直接访问的成员，如果进一步派生的话，基类的全部成员都无法在新的派生类中被访问。</p><h1 id="3-2-公有继承的访问规则"><a href="#3-2-公有继承的访问规则" class="headerlink" title="3.2 公有继承的访问规则"></a>3.2 公有继承的访问规则</h1><table><thead><tr><th>基类中的成员</th><th>私有成员</th><th>公有成员</th><th>保护成员</th></tr></thead><tbody><tr><td>内部访问</td><td>不可访问</td><td>可访问</td><td>可访问</td></tr><tr><td>对象访问</td><td>不可访问</td><td>可访问</td><td>不可访问</td></tr></tbody></table><h1 id="3-3-保护继承的访问规则"><a href="#3-3-保护继承的访问规则" class="headerlink" title="3.3 保护继承的访问规则"></a>3.3 保护继承的访问规则</h1><table><thead><tr><th>基类中的成员</th><th>私有成员</th><th>公有成员</th><th>保护成员</th></tr></thead><tbody><tr><td>内部访问</td><td>不可访问</td><td>可访问</td><td>可访问</td></tr><tr><td>对象访问</td><td>不可访问</td><td>不可访问</td><td>不可访问</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-派生类的声明&quot;&gt;&lt;a href=&quot;#1-派生类的声明&quot; class=&quot;headerlink&quot; title=&quot;1. 派生类的声明&quot;&gt;&lt;/a&gt;1. 派生类的声明&lt;/h1&gt;&lt;p&gt;声明一个派生类的一般格式为：&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="派生" scheme="https://codave.github.io/tags/%E6%B4%BE%E7%94%9F/"/>
    
      <category term="继承" scheme="https://codave.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++语法08-常类型</title>
    <link href="https://codave.github.io/2019/04/21/C++%E8%AF%AD%E6%B3%9508-%E5%B8%B8%E7%B1%BB%E5%9E%8B/"/>
    <id>https://codave.github.io/2019/04/21/C++语法08-常类型/</id>
    <published>2019-04-21T12:02:24.000Z</published>
    <updated>2019-04-21T12:45:16.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>程序中各种形式的数据共享，在不同程度上破坏了数据的安全性。常类型的引入，就是为了既保证数据共享又防止数据被改动。常类型是指使用类型修饰符const说明的类型，常类型的变量或对象成员的值在程序运行期间是不可改变的。</p></blockquote><h1 id="1-常引用"><a href="#1-常引用" class="headerlink" title="1. 常引用"></a>1. 常引用</h1><p>如果在说明引用时用const修饰，则被说明的引用为常引用。如果用常引用作形参，便不会产生对实参的不希望的更改。常引用的说明形式如下：</p><p><strong>const  类型  &amp;引用名；</strong></p><p>在实际应用中，常引用往往用来作函数的形参，这样的参数称为常参数。</p><h1 id="2-常对象"><a href="#2-常对象" class="headerlink" title="2. 常对象"></a>2. 常对象</h1><p>如果在说明对象时用const修饰，则被说明的对象为常对象。常对象的数据成员值在对象的整个生存期内不能被改变。常对象的说明该形式如下：</p><p><strong>类名   const   对象名[(参数名)]；</strong>或者   <strong>const   类名   对象名[(参数表)]；</strong></p><p><strong>注意：</strong>在定义对象时必须进行初始化，而且不能被更新。</p><h1 id="3-常对象成员"><a href="#3-常对象成员" class="headerlink" title="3. 常对象成员"></a>3. 常对象成员</h1><h1 id="3-1-常数据成员"><a href="#3-1-常数据成员" class="headerlink" title="3.1 常数据成员"></a>3.1 常数据成员</h1><p>类的数据成员可以是常量或者常引用，使用const说明的数据成员称为常数据成员。<strong>如果在一个类中说明了常数据成员，那么构造函数就只能通过成员初始化列表对该数据成员进行初始化，而其他任何函数都不能对该成员赋值。</strong></p><h1 id="3-2-常成员函数"><a href="#3-2-常成员函数" class="headerlink" title="3.2 常成员函数"></a>3.2 常成员函数</h1><p>在类中使用关键字const说明的成员函数为常成员函数，常成员函数的说明格式如下：</p><p><strong>类型说明符       函数名（参数表）const；</strong></p><p>const是函数类型的一个组成部分，因此在声明函数和定义函数时都要有关键字const。在调用时不必加const。</p><p>说明：</p><p>（1）常成员函数可以访问常数据成员，也可以访问普通数据成员。常数据成员可以被常成员函数访问，也可以被普通成员函数访问。</p><table><thead><tr><th>数据成员</th><th>普通成员函数</th><th>常成员函数</th></tr></thead><tbody><tr><td>普通数据成员</td><td>可以访问，也可以改变值</td><td>可以访问，但不可以改变值</td></tr><tr><td>常数据成员</td><td>可以访问，但不可以改变值</td><td>可以访问，但不可以改变值</td></tr><tr><td>常对象的数据成员</td><td>不允许访问和改变值</td><td>可以访问，但不可以改变值</td></tr></tbody></table><p>（2）如果将一个对象说明为常对象，则通过该对象只能调用它的常成员函数，而不能调用普通的成员函数。常成员函数是常对象的唯一的对外接口，这是C++从语法机制上对常对象的保护。</p><p>（3）常成员函数不能更新对象的数据成员，也不能调用该类中的普通成员函数，这就保证了在常成员函数中绝对不会更新数据成员的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;程序中各种形式的数据共享，在不同程度上破坏了数据的安全性。常类型的引入，就是为了既保证数据共享又防止数据被改动。常类型是指使用类型修饰符const说明的类型，常类型的变量或对象成员的值在程序运行期间是不可改变的。&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="常引用" scheme="https://codave.github.io/tags/%E5%B8%B8%E5%BC%95%E7%94%A8/"/>
    
      <category term="常函数" scheme="https://codave.github.io/tags/%E5%B8%B8%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++语法07-类的组合</title>
    <link href="https://codave.github.io/2019/04/21/C++%E8%AF%AD%E6%B3%9507-%E7%B1%BB%E7%9A%84%E7%BB%84%E5%90%88/"/>
    <id>https://codave.github.io/2019/04/21/C++语法07-类的组合/</id>
    <published>2019-04-21T10:36:48.000Z</published>
    <updated>2019-04-21T12:01:10.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在类中定义的数据成员一般都是基本的数据类型或复合数据类型。但是还可以根据需要使用其他类的对象作为正在声明的类的数据成员。在一个类中内嵌另一个类的对象作为数据成员，称为类的组合。该内嵌对象称为对象成员，也成为子对象。</p></blockquote><p>使用对象成员着重要注意的问题是如何完成对象成员的初始化工作。当创建类的对象时，如果这个类具有内嵌的对象成员，那么内嵌对象成员也将被自动创建。因此，在创建对象时既要对本类的基本数据成员初始化，又要对内嵌的对象成员进行初始化。含有对象成员的类，其构造函数和不含对象成员的构造函数有所不同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class X&#123;</span><br><span class="line">    类名<span class="number">1</span>对象成员<span class="number">1</span>；</span><br><span class="line">    类名<span class="number">2</span>对象成员<span class="number">2</span>；</span><br><span class="line">        ...</span><br><span class="line">    类名n对象成员n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一般来说，类X的构造函数的定义形式为：</p><p><strong>X::X（形参表0）：对象成员1（形参表1），对象成员2（形参表2），……{</strong></p><p>​    <strong>//类X的构造函数体</strong></p><p><strong>}</strong></p><p>当调用构造函数X::X()时，首先按各内嵌对象成员在类声明中的顺序依次调用它们的构造函数，对这些对象初始化。最后再执行类X的构造函数体，初始化类X中的其他成员。析构函数的调用顺序与构造函数的调用顺序相反。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">例：对象成员的初始化。</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x1,<span class="keyword">float</span> y1)&#123;</span><br><span class="line">        x=x1;</span><br><span class="line">        y=y1;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n x="</span>&lt;&lt; x &lt;&lt; <span class="string">"y="</span> &lt;&lt;y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">float</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> x1,<span class="keyword">float</span> y1, <span class="keyword">int</span> z1):a(x1,y1)&#123;</span><br><span class="line">        z=z1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.show();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"z="</span>&lt;&lt; z;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)</span></span>;</span><br><span class="line">    b.show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在类中定义的数据成员一般都是基本的数据类型或复合数据类型。但是还可以根据需要使用其他类的对象作为正在声明的类的数据成员。在一个类中内嵌另一个类的对象作为数据成员，称为类的组合。该内嵌对象称为对象成员，也成为子对象。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="类的组合" scheme="https://codave.github.io/tags/%E7%B1%BB%E7%9A%84%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>C++语法06-静态成员</title>
    <link href="https://codave.github.io/2019/04/21/C++%E8%AF%AD%E6%B3%9506-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/"/>
    <id>https://codave.github.io/2019/04/21/C++语法06-静态成员/</id>
    <published>2019-04-21T05:50:01.000Z</published>
    <updated>2019-04-21T08:20:37.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-静态数据成员"><a href="#1-静态数据成员" class="headerlink" title="1. 静态数据成员"></a>1. 静态数据成员</h1><blockquote><p>为了实现同一个类的多个对象之间的数据共享，C++提出了静态数据成员的概念。在一个类中 ，若将一个数据成员说明成static，这种成员被称为静态数据成员。与一般的数据成员不同，无论建立多少个类的对象，都只有一个静态数据成员的拷贝。从而实现了同一个类中的不同对象之间的数据共享。</p></blockquote><p>定义静态数据成员的格式如下：</p><p><strong>static  数据类型  数据成员名</strong></p><p>说明：</p><p>（1）静态数据成员的定义与普通数据成员相似，但前面要加上static关键字。</p><p>（2）静态数据成员的初始化与普通数据成员不同。静态数据成员初始化应在类外单独进行，而且应在定义对象之前进行。一般在主函数main之前，类声明之后的特殊地带为它提供定义和初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化的格式如下：</span><br><span class="line">数据类型  类名：：静态数据成员名=初始值；</span><br></pre></td></tr></table></figure><p>（3）静态数据成员属于类（准确地说，是属于类对象的集合），而不像普通数据成员那样属于某一对象，因此可以使用使用“类名：”访问静态的数据成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用类名访问静态数据成员的格式如下：</span><br><span class="line">类名：静态数据成员名</span><br></pre></td></tr></table></figure><p>（4）静态数据成员与静态变量一样，是在编译时创建并初始化。它在该类的任何对象被建立之前就存在。因此，公有的静态数据成员可以在对象定义之前被访问。对象定义后，公有的静态数据成员，也可以通过对象进行访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.静态数据成员名；</span><br><span class="line">对象指针-&gt;静态数据成员名；</span><br></pre></td></tr></table></figure><p>（5）私有静态数据成员不能在类外直接访问，必须通过公有的成员函数访问。</p><p>（6）C++支持静态数据成员的一个重要原因是可以不必使用全局变量。依赖于全局变量的类几乎都是违反面向对象程序设计的封装特性的。静态数据成员主要用作类的所有对象所共有的数据，如统计总数、平均数等。</p><h1 id="2-静态成员函数"><a href="#2-静态成员函数" class="headerlink" title="2. 静态成员函数"></a>2. 静态成员函数</h1><blockquote><p>在类定义中，前面有static说明的成员函数被称为静态成员函数。静态成员函数属于整个类，是该类所有对象共享的成员函数，而不是类中的某个对象。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义静态成员函数的格式如下：</span><br><span class="line"><span class="keyword">static</span>  返回类型  静态成员函数名（参数表）;</span><br><span class="line"></span><br><span class="line">与静态数据成员类似，调用公有静态成员函数的一般格式有如下几种：</span><br><span class="line">(<span class="number">1</span>) 类名::静态成员函数名（实参名）</span><br><span class="line">(<span class="number">2</span>) 对象.静态成员函数名（实参名）</span><br><span class="line">(<span class="number">3</span>) 对象指针-&gt;静态成员函数名（实参名）</span><br></pre></td></tr></table></figure><p>例：静态成员函数访问静态数据成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Small_cat</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Small_cat(<span class="keyword">double</span> w);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">total_disp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> total_weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> total_number;</span><br><span class="line">&#125;;</span><br><span class="line">Small_cat::Small_cat(<span class="keyword">double</span> w)&#123;</span><br><span class="line">    weight=w;</span><br><span class="line">    total_weight+=w;</span><br><span class="line">    total_number++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Small_cat::display()&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"这只小猫的重量是："</span>&lt;&lt;weight&lt;&lt;<span class="string">"千克\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Small_cat::total_disp()&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;total_number&lt;&lt;<span class="string">"只小猫的总重量是："</span>；</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;total_weight&lt;&lt;<span class="string">"千克"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> Small_cat::total_weight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> Small_cat::total_number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Small_cat w1(0.5),w2(0.6),w3(0.4);</span><br><span class="line">    w1.display();</span><br><span class="line">    w2.display();</span><br><span class="line">    w3.display();</span><br><span class="line">    Samll_cat::total_disp();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对静态成员函数的使用再作几点说明：</p><p>（1）一般情况下，静态函数成员主要用来访问静态数据成员。当它与静态数据成员一起使用时，达到了对同一个类中对象之间共享数据的目的。</p><p>（2）私有静态成员函数不能做类外部的函数和对象访问。</p><p>（3）使用静态成员函数的一个原因是，可以用它在建立任何对象之前调用静态成员函数，以处理静态数据成员，这是普通成员函数不能实现的功能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Small_cat::total_disp();<span class="comment">//可以用它在建立任何对象之前调用静态成员函数</span></span><br><span class="line">    Small_cat w1(0.5),w2(0.6),w3(0.4);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）编译系统将静态成员函数限定为内部连接，也就是说，与现行文件相连接的其他文件中的同名函数不会与该函数发生冲突，维护了该函数使用的安全性，这是使用静态成员函数的另一个原因。</p><p>（5）静态成员函数是类的一部分，而不是对象的一部分。</p><p>（6）静态成员函数与非静态成员函数的重要的区别是：非静态成员函数有this指针，而静态成员函数没有this指针。<strong>静态成员函数可以直接访问本类中的静态数据成员，因为静态数据成员同样是属于类的，可以直接访问。</strong>一般而言，静态成员函数不访问类中的非静态成员。若确实需要访问非静态数据成员，静态成员函数只能通过对象名（或对象指针、对象引用）访问该对象的非静态成员。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-静态数据成员&quot;&gt;&lt;a href=&quot;#1-静态数据成员&quot; class=&quot;headerlink&quot; title=&quot;1. 静态数据成员&quot;&gt;&lt;/a&gt;1. 静态数据成员&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了实现同一个类的多个对象之间的数据共享，C++提出了静态数据
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="静态成员" scheme="https://codave.github.io/tags/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>C++语法05-对象的赋值和复制</title>
    <link href="https://codave.github.io/2019/04/20/C++%E8%AF%AD%E6%B3%9505-%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%B5%8B%E5%80%BC%E5%92%8C%E5%A4%8D%E5%88%B6/"/>
    <id>https://codave.github.io/2019/04/20/C++语法05-对象的赋值和复制/</id>
    <published>2019-04-20T13:36:51.000Z</published>
    <updated>2019-04-21T08:21:10.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-对象赋值语句"><a href="#1-对象赋值语句" class="headerlink" title="1. 对象赋值语句"></a>1. 对象赋值语句</h1><blockquote><p>这里所指的对象的赋值是指对其中的数据成员赋值，而不是对成员函数赋值。</p></blockquote><p>例如：A和B是同一类的两个对象，那么下述对象赋值语句 B=A；就能把对象A的数据成员的值逐位复制给对象B。</p><p>说明：</p><p>（1）在使用对象赋值语句进行对象赋值时，两个对象的类型必须相同，如对象的类型不相同，编译时将出错。</p><p>（2） 两个对象之间的赋值，仅仅使这些对象中数据成员相同，而两个对象仍是分离的。</p><p>（3）将一个对象的值赋给另一个对象时，多数情况下都是成功的，但当类中存在指针时，可能会产生错误。</p><h1 id="2-拷贝构造函数"><a href="#2-拷贝构造函数" class="headerlink" title="2. 拷贝构造函数"></a>2. 拷贝构造函数</h1><blockquote><p>拷贝构造函数是一种特殊的构造函数，其形参是本类对象的引用。拷贝构造函数的作用是，在建立一个新的对象时，使用一个已经存在的对象去初始化这个新对象。</p></blockquote><p>例如： Point p2（p1);</p><p>其作用是，在建立新对象p2时，用已经存在的对象p1去初始化新对象p2，在这个过程中就要调用拷贝构造函数。</p><p>拷贝构造函数具有以下特点：</p><p>（1）因为该函数也是一种构造函数，所以其函数名与类名相同，并且该函数也没有返回值类型。</p><p>（2）该函数只有一个参数，并且是同类对象的引用。</p><p>（3）每个类都必须有一个拷贝构造构造函数。程序员可以自定义拷贝构造函数，用于按照需要初始化新对象。如果程序员没有定义类的拷贝构造函数，系统就会自动生成产生一个默认拷贝构造函数，用于复制出数据成员值完全相同的新对象。</p><h1 id="2-1-自定义拷贝构造函数"><a href="#2-1-自定义拷贝构造函数" class="headerlink" title="2.1 自定义拷贝构造函数"></a>2.1 自定义拷贝构造函数</h1><p>自定义拷贝函数的一般形式如下：</p><p><strong>类名：：类名（const 类名 &amp;对象名）{</strong></p><p>​        <strong>//拷贝构造函数的函数体</strong></p><p><strong>}</strong></p><p>调用拷贝构造函数的一般形式为：</p><p>（1）代入法： <strong>类名  对象2（对象1）；</strong></p><p>（2）赋值法： <strong>类名  对象2 = 对象1；</strong></p><h1 id="2-2-默认拷贝构造函数"><a href="#2-2-默认拷贝构造函数" class="headerlink" title="2.2 默认拷贝构造函数"></a>2.2 默认拷贝构造函数</h1><blockquote><p>每个类都必须有一个拷贝构造函数。如果程序员没有定义拷贝构造函数，系统就会自动生成一个默认拷贝构造函数，用于复制出完全相同的新对象。</p></blockquote><p>在通常情况下，默认拷贝函数是能够胜任工作的，但如果类中有指针类型时，调用默认拷贝构造函数有时会产生错误，使用时要予以注意。</p><h1 id="2-3-调用拷贝构造函数的3种情况"><a href="#2-3-调用拷贝构造函数的3种情况" class="headerlink" title="2.3 调用拷贝构造函数的3种情况"></a>2.3 调用拷贝构造函数的3种情况</h1><blockquote><p>普通的构造函数是在对象创建时被调用，而拷贝构造函数在以下3种情况下都会被调用。</p></blockquote><p>（1）当用类的一个对象去初始化该类的另一个对象时，拷贝构造函数将会被调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">Point p3=p1;</span><br></pre></td></tr></table></figure><p>（2）当函数的形参是类的对象，在调用函数进行形参和实参结合时，拷贝构造函数将会调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">    p.print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    fun1(p1);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）当函数的返回值是类的对象，在函数调用完毕将返回值（对象）带回函数调用处时。此时就会调用拷贝构造函数，将此对象复制给一个临时对象并传到该函数的调用处。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">10</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Point p2;</span><br><span class="line">    p2=fun2();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-对象赋值语句&quot;&gt;&lt;a href=&quot;#1-对象赋值语句&quot; class=&quot;headerlink&quot; title=&quot;1. 对象赋值语句&quot;&gt;&lt;/a&gt;1. 对象赋值语句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这里所指的对象的赋值是指对其中的数据成员赋值，而不是对成员函数
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="对象赋值" scheme="https://codave.github.io/tags/%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC/"/>
    
      <category term="对象复制" scheme="https://codave.github.io/tags/%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>C++语法04-向函数传递对象</title>
    <link href="https://codave.github.io/2019/04/20/C++%E8%AF%AD%E6%B3%9504-%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1/"/>
    <id>https://codave.github.io/2019/04/20/C++语法04-向函数传递对象/</id>
    <published>2019-04-20T12:31:32.000Z</published>
    <updated>2019-04-21T08:21:01.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用对象作为函数参数"><a href="#1-使用对象作为函数参数" class="headerlink" title="1. 使用对象作为函数参数"></a>1. 使用对象作为函数参数</h1><blockquote><p>对象可以作为参数传递给函数，其方法与传递基本类型的变量相同。在向函数传递对象时，是通过“传值调用”传递给函数的，即单向传递，只由实参传给形参，而不能由形参传回来给实参。<strong>因此函数中对对象的任何修改均不影响调用该函数的对象（实参）本身。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tr</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Tr(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        i=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_i</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        i=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_i</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqr_it</span><span class="params">(Tr ob)</span></span>&#123;</span><br><span class="line">    ob.set_i(ob.get_i()*ob.get_i());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"在函数sqr_it内，形参对象ob的数据成员i的值为："</span>&lt;&lt;ob.get_i();      <span class="comment">//100</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Tr <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用函数sqr_it前，实参对象obj的数据成员i的值为："</span>;         <span class="comment">//10</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;obj.get_i()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sqr_it(obj);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用函数sqr_it后，实参对象obj的数据成员i的值为："</span>;        <span class="comment">//10</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;obj.get_i();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用对象指针作为函数参数"><a href="#2-使用对象指针作为函数参数" class="headerlink" title="2. 使用对象指针作为函数参数"></a>2. 使用对象指针作为函数参数</h1><blockquote><p>对象指针可以作为函数的参数，使用对象指针作为函数参数可以实现“传址调用”，即在函数调用时使实参对象和形参对象指针变量指向同一内存地址，在函数调用过程中，<strong>对形参对象指针值的改变也同样影响着实参对象的值</strong>。<strong>当函数的形参是对象指针时，调用函数的对应实参应该是某个对象的地址值。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tr</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Tr(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        i=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_i</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        i=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_i</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqr_it</span><span class="params">(Tr *ob)</span></span>&#123;</span><br><span class="line">    ob-&gt;set_i(ob-&gt;get_i()*ob-&gt;get_i());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"在函数sqr_it内，形参对象ob的数据成员i的值为："</span>&lt;&lt;ob-&gt;get_i();        <span class="comment">//100</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Tr <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用函数sqr_it前，实参对象obj的数据成员i的值为："</span>;           <span class="comment">//10</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;obj.get_i()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sqr_it(&amp;obj);      <span class="comment">//传地址</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用函数sqr_it后，实参对象obj的数据成员i的值为："</span>;            <span class="comment">//100</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;obj.get_i();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用对象引用作为函数参数"><a href="#3-使用对象引用作为函数参数" class="headerlink" title="3. 使用对象引用作为函数参数"></a>3. 使用对象引用作为函数参数</h1><blockquote><p>在实际中，使用对象引用作为函数参数非常普遍，大部分程序员喜欢用对象引用取代对象指针作为函数参数。因为使用对象引用作为函数参数不但具有对象指针用作函数参数的优点，而且用对象引用作为函数参数将<strong>更简单、更直接</strong>。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tr</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Tr(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        i=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_i</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        i=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_i</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqr_it</span><span class="params">(Tr &amp;ob)</span></span>&#123;</span><br><span class="line">    ob.set_i(ob.get_i()*ob.get_i());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"在函数sqr_it内，形参对象ob的数据成员i的值为："</span>&lt;&lt;ob.get_i();<span class="comment">//100</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Tr <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用函数sqr_it前，实参对象obj的数据成员i的值为："</span>;   <span class="comment">//10</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;obj.get_i()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sqr_it(obj);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用函数sqr_it后，实参对象obj的数据成员i的值为："</span>;<span class="comment">//100</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;obj.get_i();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用对象作为函数参数&quot;&gt;&lt;a href=&quot;#1-使用对象作为函数参数&quot; class=&quot;headerlink&quot; title=&quot;1. 使用对象作为函数参数&quot;&gt;&lt;/a&gt;1. 使用对象作为函数参数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对象可以作为参数传递给函数，其
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="函数传参" scheme="https://codave.github.io/tags/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>C++语法03-对象数组与对象指针</title>
    <link href="https://codave.github.io/2019/04/20/C++%E8%AF%AD%E6%B3%9503-%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88/"/>
    <id>https://codave.github.io/2019/04/20/C++语法03-对象数组与对象指针/</id>
    <published>2019-04-20T05:20:06.000Z</published>
    <updated>2019-04-21T08:20:51.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-对象数组"><a href="#1-对象数组" class="headerlink" title="1. 对象数组"></a>1. 对象数组</h1><blockquote><p>所谓对象数组是指每一个数组元素都是对象的数组，也就是说，若一个类有若干个对象，我们把这一系列的对象用一个数组来存放。对象数组的元素是对象，不仅具有数据成员，而且还有函数成员。</p></blockquote><p>定义一个一维数组的格式如下：</p><p><strong>类名 数组名[下标表达式]</strong></p><p>例如有10个复数，每个复数的属性包括实部与虚部。如果为每一个复数建立一个对象，需要分别取10个对象名。显然用程序处理起来很不方便。这时可以定义一个复数类Complex的对象数组，每一个数组元素是Complex类的一个对象，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Complex com[<span class="number">10</span>];<span class="comment">//定义类Complex的对象数组com,含有10个对象数组元素</span></span><br></pre></td></tr></table></figure><p>在建立数组时，同样要调用构造函数。有几个数组元素就要调用几次构造函数。例如有10个数组元素 ，就要调用10次构造函数。类Complex的构造函数有两个参数，分别用于给实部数据和虚部数据赋值。<strong>如果构造函数只有1个参数，在定义对象数组时可以直接在等号后面的花括号内提供实参。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用只有1个参数的构造函数给对象数组赋值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exam</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        exam(<span class="keyword">int</span> n)&#123;</span><br><span class="line">            x=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">get_x</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    exam ob1[<span class="number">4</span>]=&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>,<span class="number">44</span>&#125;;<span class="comment">//用只有1个参数的构造函数给对象数组赋值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;ob1[i].get_x()&lt;&lt;'';</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与基本数据类型的数组一样，在使用对象数组时也只能访问单个数组元素，其一般形式是：</p><p>​                        <strong>数组名  [下标].成员名</strong></p><p>以上例子中构造函数只有一个参数，如果构造函数有多个参数，在定义对象数组时应当怎样实现初始化？我们只要在花括号中分别写出构造函数并指定实参即可。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Complex com[<span class="number">3</span>]=&#123;        <span class="comment">//定义对象数组com</span></span><br><span class="line">    Complex(<span class="number">1.1</span>, <span class="number">2.2</span>);</span><br><span class="line">    Complex(<span class="number">3.3</span>, <span class="number">4.4</span>);</span><br><span class="line">    Complex(<span class="number">5.5</span>, <span class="number">6.6</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于这个对象数组有3个对象数组元素，因此在建立对象数组时，3次调用构造函数，对每一个对象数组元素初始化。<strong>当1个数组中的数组元素被删除时，系统会调用析构函数来完成扫尾工作，有几个对象数组元素就会调用几次析构函数。</strong></p><h1 id="2-对象指针"><a href="#2-对象指针" class="headerlink" title="2. 对象指针"></a>2. 对象指针</h1><blockquote><p>每一个对象在初始化后都会在内存占有一定的空间。因此，既可以通过对象名访问一个对象，也可以通过对象地址来访问一个对象。对象指针就是用于存放对象地址的变量。</p></blockquote><p>声明对象指针的一般语法形式为：</p><p>​                            <strong>类名 *对象指针名</strong></p><p><strong>（1）用指针访问单个对象成员</strong>：</p><p>​    说明对象指针的语法和说明其他数据类型指针的语法相同。使用对象指针时，首先要把它指向一个已创建的对象，然后才能引用该对象的成员。</p><p>​    在一般情况下，用点运算符“.”来访问对象成员，当用指向对象的指针来访问对象成员时，就要用“-&gt;”操作符。</p><p><strong>（2）用对象指针访问对象数组</strong></p><p>​    对象指针不仅能引用单个对象，也能访问对象数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    exe ob[<span class="number">2</span>]; <span class="comment">//定义类exe的对象数组ob[2]</span></span><br><span class="line">    exe *p; <span class="comment">//定义指向类exe的对象指针变量p</span></span><br><span class="line">    ob[<span class="number">0</span>].set_a(<span class="number">10</span>); <span class="comment">//</span></span><br><span class="line">    ob[<span class="number">0</span>].set_b(<span class="number">20</span>);</span><br><span class="line">    p=ob;</span><br><span class="line">    p-&gt;show_a();</span><br><span class="line">    p++;      <span class="comment">//一般而言，当指针加1或减1时，它总是指向其基本类型中相邻的一个元素，对象指针也是如此</span></span><br><span class="line">    p-&gt;show_a();  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-this指针"><a href="#3-this指针" class="headerlink" title="3. this指针"></a>3. this指针</h1><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-对象数组&quot;&gt;&lt;a href=&quot;#1-对象数组&quot; class=&quot;headerlink&quot; title=&quot;1. 对象数组&quot;&gt;&lt;/a&gt;1. 对象数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;所谓对象数组是指每一个数组元素都是对象的数组，也就是说，若一个类有若干个对象，
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="对象数组" scheme="https://codave.github.io/tags/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/"/>
    
      <category term="对象指针" scheme="https://codave.github.io/tags/%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C++语法02-构造函数和析构函数</title>
    <link href="https://codave.github.io/2019/04/19/C++%E8%AF%AD%E6%B3%9502-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://codave.github.io/2019/04/19/C++语法02-构造函数和析构函数/</id>
    <published>2019-04-19T12:58:37.000Z</published>
    <updated>2019-04-20T05:19:06.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-对象的初始化和构造函数"><a href="#1-对象的初始化和构造函数" class="headerlink" title="1. 对象的初始化和构造函数"></a>1. 对象的初始化和构造函数</h1><blockquote><p><strong>类是一种抽象的数据类型，它不占存储空间，不能容纳具体的数据。因此在类声明中不能给数据成员赋初值。</strong>与使用变量一样，使用对象时也应该先定义，后使用。在定义对象时，对数据成员赋初值，称为对象的初始化。在定义对象时，如果某一数据成员没有被赋值，则它的值是不可预知的。对象是一个实体，在使用对象时，它的每一个数据成员都应该有确定的值。</p></blockquote><p>如果一个类中的所有成员，都是共有的，则可以在定义对象时对数据成员进行初始化。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">double</span> real;</span><br><span class="line">    <span class="keyword">double</span> imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex c1=&#123;<span class="number">1.1</span>,<span class="number">2.2</span>&#125;;</span><br></pre></td></tr></table></figure><p>说明：这种方法类似于结构体变量初始化的方法。但是，如果类中包含私有的或保护的成员时，就不能用这种方法进行初始化。除了调用公有成员函数来给数据成员赋值，C++提供了一个更好的方法，利用构造函数来完成对象的初始化。</p><blockquote><p>构造函数是一种特殊的成员函数，它主要用于为对象分配对象，进行初始化。构造函数的名字必须和类名相同，而不能由用户任意命名。它可以有任意类型的参数，但不能具有返回值类型。它不需要用户来调用，而是在建立对象时自动执行的。</p></blockquote><p><strong>在建立对象的同时，采用构造函数给成员赋初值，通常有以下两种形式。</strong></p><p><strong>形式1：</strong></p><p><strong>类名  对象名[(实参表)]</strong></p><p><strong>形式2：</strong></p><p><strong>类名  *指针变量名=new 类名[(实参表)]</strong></p><p>说明：这时编译系统开辟了一段内存空间，并在此空间中存放了一个Complex类对象，同时调用了该类的构造函数给数据成员赋初值。这个对象没有名字，称为无名对象。但是该对象有地址，这个地址存放在指针变量pa中。访问用new动态建立的对象一般是不用对象的，而是通过指针访问。</p><p><strong>注意：</strong></p><p>（1）当new建立的对象使用结束时，不再需要它时，可以用delete运算符予以释放<code>delete pa</code>。</p><p>（2）与普通成员函数一样，构造函数的函数体可写在类体内（系统将构造函数作为内联函数处理），也可以写在类体外。</p><p>（3）构造函数一般声明为公有函数，它是在定义对象的同时被自动调用的，而且只执行一次。</p><p>（4）如果没有给类定义构造函数，则编译系统自动地生成一个默认构造函数。<strong>（这个默认的构造函数不带任何参数，函数体是空的，它只能为对象开辟数据成员存储空间，而不能给对象中的数据成员赋值）</strong></p><p>（5）构造函数可以不带参数，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Complex()&#123;   <span class="comment">//不带参数的构造函数</span></span><br><span class="line">    real=<span class="number">0</span>;</span><br><span class="line">    imag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex A;   <span class="comment">//定义类Complex的对象A时调用不要带参数，也不要要带括号！！！</span></span><br></pre></td></tr></table></figure><h1 id="2-用成员初始化列表对数据成员初始化"><a href="#2-用成员初始化列表对数据成员初始化" class="headerlink" title="2. 用成员初始化列表对数据成员初始化"></a>2. 用成员初始化列表对数据成员初始化</h1><blockquote><p>C++还提供另一种初始化数据成员的方法——用成员初始化列表对数据成员初始化。这种方法不在函数体内用赋值语句对数据成员初始化，而是在函数首部实现的。</p></blockquote><p>带有成员初始化列表的构造函数的一般形式如下：</p><p><strong>类名：：构造函数名（[参数表])[:(成员初始化列表)]{</strong></p><p>​        <strong>//构造函数体</strong></p><p><strong>}</strong></p><p>成员初始化列表的一般形式为：</p><p><strong>数据成员名1（初始值1），数据成员名2（初始值2），…..</strong></p><p><strong>注意:</strong></p><p>（1）对于用<code>const</code>修饰的数据成员，或是引用类型的数据成员，是不允许用赋值语句直接赋值的。因此，只能用成员初始化列表对其进行初始化。</p><p>（2）数据成员是按照它们在类中声明的顺序进行初始化的，与它们在成员初始化列表中列出的顺序无关。</p><h1 id="3-构造函数的重载"><a href="#3-构造函数的重载" class="headerlink" title="3. 构造函数的重载"></a>3. 构造函数的重载</h1><blockquote><p>与一般的成员函数一样，C++允许构造函数重载，以适应不同的场合。</p></blockquote><p><strong>注意：</strong></p><p>（1）使用无参构造函数创建对象时，应该用语句“Date date1；”，而不能用语句“Date date1()；”。因为语句“Date date1()；”表示声明一个名为date1的普通函数，此函数的返回值为Date类型。</p><p>（2）如果在类中用户没有定义构造函数，系统会自动提供一个函数体为空的默认构造函数。但是，只要类中定义了一个构造函数（不一定是无参构造函数），系统将不再给它提供默认构造函数。</p><h1 id="4-带默认参数的构造函数"><a href="#4-带默认参数的构造函数" class="headerlink" title="4. 带默认参数的构造函数"></a>4. 带默认参数的构造函数</h1><blockquote><p>对于带参数的构造函数，在定义对象时必须给构造函数的形参传递参数的值，否则构造函数将不被执行。但在实际使用中，有些构造函数的参数值在大部分情况是相同的，只有在特殊情况下才需要改变它的参数值。</p></blockquote><p><strong>说明：</strong></p><p>（1）如果构造函数在类的声明外定义，那么默认参数在类内声明构造函数原型时指定，而不能在类外构造函数定义时指定。因为类的声明是放在头文件中的，用户可以看到，而构造函数的定义是类的实现细节，用户往往看不到。因此，在声明时指定默认参数，可以保证用户在建立对象时知道怎么使用默认参数。</p><p>（2）如果构造函数的全部参数都指定了默认值，则在定义对象时可以指定1个或几个实参，也可以不给出实参，这时的构造函数也属于默认构造函数。<strong>因为一个类只能有一个默认构造函数，因此不能同时再声明无参数的默认构造函数。</strong>否则，编译系统将无法识别应该调用哪个构造函数，因此产生了二义性。</p><p>（3）在一个类中定义了全部是默认参数的构造函数后，不能再定义重载构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如在一个类中有以下构造函数的声明</span><br><span class="line">Complex(<span class="keyword">double</span> r=<span class="number">0.0</span>, <span class="keyword">double</span> i=<span class="number">0.0</span>);</span><br><span class="line">Complex(<span class="keyword">double</span> r);</span><br><span class="line"></span><br><span class="line">如果用以下语句定义对象</span><br><span class="line">Complex S2（<span class="number">1.1</span>）；     <span class="comment">//无法判断应该调用以上哪个构造函数</span></span><br></pre></td></tr></table></figure><p>因此，一般不要同时使用构造函数的重载和有默认参数的构造函数。</p><h1 id="5-析构函数"><a href="#5-析构函数" class="headerlink" title="5. 析构函数"></a>5. 析构函数</h1><blockquote><p>析构函数也是一种特殊的成员函数。它执行与构造函数相反的操作，通常用于执行一些清理任务，如释放分配给对象的内存空间等。析构函数有如下一些特点：</p><p>（1）析构函数名与类名相同，但它前面必须加一个波浪号（~）。</p><p>（2）析构函数不返回任何值。在定义析构函数时，是不能说明它的类型的，甚至说明为void也不行。</p><p>（3）析构函数没有参数，因此它不能被重载。<strong>一个类可以有多个构造函数，但只能有一个析构函数。</strong></p><p>（4）撤销对象时，编译系统会自动地调用析构函数。</p></blockquote><p><strong>说明：</strong></p><p>（1）每个类必须有一个析构函数。若没有显示地为一个类定义析构函数，则编译系统会自动地生成一个默认析构函数。**对于大多数而言，这个默认析构函数就能满足要求。但是，如果在一个对象撤销之前需要完成另外一些处理工作的话，则应该显示地定义析构函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String_data</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        String_data(<span class="keyword">char</span> *s)&#123;</span><br><span class="line">            str=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s)+<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(str, s);</span><br><span class="line">        &#125;</span><br><span class="line">        ~String_data()&#123;</span><br><span class="line">            <span class="keyword">delete</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">get_info</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sent_info</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是构造函数和析构函数最常见的用法，即在构造函数中用运算符new为字符串分配存储空间，最后在析构函数中用运算符delete释放已分配的存储空间。</p><p>（2）除了在主函数结束（或调用exit函数）时，对象被撤销，系统会自动调用析构函数外，在以下情况，析构函数也会被调用：</p><ul><li>如果一个对象被定义在一个函数体内，则当这个函数被调用结束时，该对象将释放，析构函数被自动调用。</li><li>若一个对象时使用new运算符动态创建的，在使用delete运算符释放它时，delete会自动调用析构函数。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-对象的初始化和构造函数&quot;&gt;&lt;a href=&quot;#1-对象的初始化和构造函数&quot; class=&quot;headerlink&quot; title=&quot;1. 对象的初始化和构造函数&quot;&gt;&lt;/a&gt;1. 对象的初始化和构造函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;类是一
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="构造函数" scheme="https://codave.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="析构函数" scheme="https://codave.github.io/tags/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++语法01-类和对象的基本概念</title>
    <link href="https://codave.github.io/2019/04/07/C++%E8%AF%AD%E6%B3%9501-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://codave.github.io/2019/04/07/C++语法01-类和对象的基本概念/</id>
    <published>2019-04-07T12:52:37.000Z</published>
    <updated>2019-04-21T09:05:03.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-结构体的扩充"><a href="#1-结构体的扩充" class="headerlink" title="1. 结构体的扩充"></a>1. 结构体的扩充</h1><blockquote><p>结构体是C语言的一种自定义的数据类型，在结构体中可以含有多种不同类型的数据。C++语言对结构体类型进行了扩充，它不仅可以含有不同类型的数据，而且还可以含有函数。</p></blockquote><p>例如下面声明了一个扩充的结构体Complex:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span>&#123;</span><span class="comment">//声明了一个名为Complex的结构体</span></span><br><span class="line">    <span class="keyword">double</span> real;<span class="comment">//复试的实部    </span></span><br><span class="line">    <span class="keyword">double</span> imag;<span class="comment">//复试的虚部</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> r,<span class="keyword">double</span> i)</span></span>&#123;</span><br><span class="line">        real=r;</span><br><span class="line">        imag=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">abscomplex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> t;</span><br><span class="line">        t=real*real+imag*imag;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体中的数据和成员都是结构体的成员，在C++中，通常把结构体中的数据成为数据成员，把函数称为成员函数。为了访问这些成员函数，必须先定义该结构体类型的变量，然后像访问结构体中的数据一样进行访问。</p><p><strong>C++提供了一种比结构体更安全有效的数据类型-类</strong>。类与结构体的扩充形式十分相似。上面的结构体类型Complex可以用类改写如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span><span class="comment">//声明了一个名为Complex的类</span></span><br><span class="line">    <span class="keyword">double</span> real;<span class="comment">//数据成员，复试的实部    </span></span><br><span class="line">    <span class="keyword">double</span> imag;<span class="comment">//数据成员，复试的虚部</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> r,<span class="keyword">double</span> i)</span></span>&#123;<span class="comment">//成员函数</span></span><br><span class="line">        real=r;</span><br><span class="line">        imag=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">abscomplex</span><span class="params">()</span></span>&#123;<span class="comment">//成员函数</span></span><br><span class="line">        <span class="keyword">double</span> t;</span><br><span class="line">        t=real*real+imag*imag;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>类是一种数据类型，它是一种用户定义的抽象的函数类型。C++规定，在默认情况下，类中的成员是私有的，结构体中成员是共有的。</p></blockquote><h1 id="2-类的声明"><a href="#2-类的声明" class="headerlink" title="2. 类的声明"></a>2. 类的声明</h1><p>可以得出，类类型声明的一般形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line">    [<span class="keyword">private</span>:]</span><br><span class="line">    私有数据成员和成员函数</span><br><span class="line">    [<span class="keyword">public</span>:]</span><br><span class="line">        公有数据成员和成员函数</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1)私有成员(用private声明)包括数据成员和成员函数只能被类内的成员函数访问，公有成员(用public声明)包括数据成员和成员函数既可被类内的成员函数访问，也可被类外的对象访问。</p><p>(2)除了private和public之外，类中的成员还可以用另一个关键字protected来说明。被protected说明的数据成员和成员函数称为保护成员。保护成员可以由本类的成员函数访问，也可以由本类的派生类的成员函数访问。</p><p>(3)数据成员可以是任何数据成员，但不能是用自动(auto)、寄存器(register)或外部(extern)进行说明。</p><h1 id="3-成员函数的定义"><a href="#3-成员函数的定义" class="headerlink" title="3. 成员函数的定义"></a>3. 成员函数的定义</h1><blockquote><p>类的成员函数是函数的一种，它也有函数名、返回值类型和参数表，用法和普通函数差不多，只是它属于一个类的成员。<strong>成员函数可以访问本类中任何成员（包括private、protected、public）</strong>。</p></blockquote><p><strong>成员函数的三种定义方式</strong></p><blockquote><p><strong>第一种</strong>：在类声明中只给出成员函数的原型，而将成员函数的定义放在类的外部。<strong>(类内声明，类外定义)</strong></p></blockquote><p>这种成员函数在类外定义的一般形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 类名：：成员函数名（参数表）&#123;</span><br><span class="line">    </span><br><span class="line">    函数体</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：在类声明中，成员函数的原型的参数表中可以不说明参数的名字，而只说明它们的类型。<strong>但是</strong>，在类外定义成员函数时，不但要说明参数表中的参数的类型，还必须要指出其参数名。</p><blockquote><p><strong>第二种：</strong>将成员函数直接定义在类的内部。</p></blockquote><p><strong>说明</strong>：编译器会将这些函数隐含地定义为内联成员函数。这种定义内联成员内联函数的方法没有使用关键字<strong>inline</strong>进行声明，因此称为<strong>隐式定义</strong>。</p><blockquote><p>第三种：在类内函数原型声明前或在类外定义成员函数前冠以关键字<strong>inline</strong>，因此称为<strong>显示定义</strong>。</p></blockquote><p><strong>说明</strong>：可以在声明函数原型和定义函数时同时写inline，也可以在其中一处声明inline，效果是相同的。都能按内联函数处理 。使用inline定义内联函数时，必须将类的声明和内联成员函数的定义都放在同一个文件（或同一个头文件中），否则编译时无法进行代码置换。</p><h1 id="4-对象的定义及使用"><a href="#4-对象的定义及使用" class="headerlink" title="4. 对象的定义及使用"></a>4. 对象的定义及使用</h1><h2 id="4-1-对象的定义"><a href="#4-1-对象的定义" class="headerlink" title="4.1 对象的定义"></a>4.1 对象的定义</h2><p>可以用以下两种方法定义对象：</p><p>（1）在声明类的同时，直接定义对象。即直接在声明类的右花括号“}”后，直接写出属于该类的对象名表。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setpoint</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getx</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gety</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;op1,op2;</span><br></pre></td></tr></table></figure><p>在声明类Point的同时，直接定义了对象op1,op2。</p><p>（2）声明了类之后，在使用时再定义对象。其一般形式如下：<code>类名 对象名1，对象名2，..... ;</code></p><p>例如<code>Point op1,op2;</code></p><h2 id="4-2-对象中成员的访问"><a href="#4-2-对象中成员的访问" class="headerlink" title="4.2 对象中成员的访问"></a>4.2 对象中成员的访问</h2><blockquote><p>不论是数据成员，还是函数成员，只要是公有的，在类的外部可以通过类的对象进行访问。访问对象中的成员通常有一下三种方法。</p></blockquote><p>（1）<strong>通过对象名和对象选择符访问对象中的成员</strong></p><p>​    其一般形式是： <code>对象名.数据成员名</code> 或者 <code>对象名.成员函数名[(实参表)]</code></p><p>​    说明：<code>.</code>叫做对象选择符，简称点运算符</p><p>（2）<strong>通过指向对象的指针访问对象中的成员</strong></p><p>​    在定义对象时，若我们定义的是指向此对象的指针，则访问此对象的成员时，不能用<code>.</code>操作符，而应该使用<code>-&gt;</code>操作符。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">Date d,*ptr;</span><br><span class="line">ptr=&amp;d;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ptr-&gt;year;</span><br></pre></td></tr></table></figure><p>在此，<code>ptr-&gt;year</code>表示<code>ptr</code>当前指向对象中<code>d</code>中的成员<code>year</code>，因为<code>（*ptr)</code>就是对象<code>d</code>，<code>(*ptr).year</code>表示的也就是对象<code>d</code>中的成员<code>year</code>。所以有如下等价关系：</p><p><img src="/2019/04/07/C++语法01-类和对象的基本概念/1.png" alt="图1"></p><p>（3）<strong>通过对象的引用访问对象中的成员</strong></p><p>​    如果为了一个对象定义了一个引用，也就是为这个对象起了一个别名、因此完全可以通过引用来访问对象中的成员，其方法与通过对象名来访问对象中的成员是相同的。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">Date d1;</span><br><span class="line">Date &amp;d2=d1;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;d1.year;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;d2.year;</span><br></pre></td></tr></table></figure><p>由于d2是d1的引用（即d2和d1占有相同的存储单），因此d2.year和d1.year是相同的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-结构体的扩充&quot;&gt;&lt;a href=&quot;#1-结构体的扩充&quot; class=&quot;headerlink&quot; title=&quot;1. 结构体的扩充&quot;&gt;&lt;/a&gt;1. 结构体的扩充&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;结构体是C语言的一种自定义的数据类型，在结构体中可以含有多种不
      
    
    </summary>
    
      <category term="C++" scheme="https://codave.github.io/categories/C/"/>
    
    
      <category term="类和对象" scheme="https://codave.github.io/tags/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础07-其他命令</title>
    <link href="https://codave.github.io/2019/03/24/Linux%E5%9F%BA%E7%A1%8007-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/24/Linux基础07-其他命令/</id>
    <published>2019-03-24T05:03:16.000Z</published>
    <updated>2019-04-21T09:09:26.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-查找文件"><a href="#1-查找文件" class="headerlink" title="1. 查找文件"></a>1. 查找文件</h1><ul><li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>find [路径] -name “*.py”</td><td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td></tr></tbody></table><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li><li>有关 <code>find</code> 的高级使用，见高级语法</li></ul><h2 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h2><ol><li>搜索桌面目录下，文件名包含 <code>1</code> 的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">"*1*"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">"*.txt"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>搜索桌面目录下，以数字 <code>1</code> 开头的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">"1*"</span></span><br></pre></td></tr></table></figure><h1 id="2-软链接"><a href="#2-软链接" class="headerlink" title="2. 软链接"></a>2. 软链接</h1><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td></tr></tbody></table><p>注意：</p><ol><li><p>没有-s选项建立的是一个硬链接文件,两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></p></li><li><p><strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</p></li></ol><h2 id="演练目标-1"><a href="#演练目标-1" class="headerlink" title="演练目标"></a>演练目标</h2><ol><li>将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li><li>在桌面目录下新建01.py的软链接FirstPython<br> 分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li><li>将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li></ol><h2 id="硬链接简介"><a href="#硬链接简介" class="headerlink" title="硬链接简介"></a>硬链接简介</h2><ul><li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li></ul><h3 id="硬链接演练"><a href="#硬链接演练" class="headerlink" title="硬链接演练"></a>硬链接演练</h3><ol><li>在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li><li>使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li><li>删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li></ol><blockquote><p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p></blockquote><p><strong>提示：</strong></p><ul><li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li><li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li><li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li></ul><h1 id="3-打包压缩"><a href="#3-打包压缩" class="headerlink" title="3. 打包压缩"></a>3. 打包压缩</h1><ul><li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li><li>在不同操作系统中，常用的打包压缩方式是不同的<ul><li><code>Windows</code> 常用 <code>rar</code></li><li><code>Mac</code> 常用 <code>zip</code></li><li><code>Linux</code> 常用 <code>tar.gz</code></li></ul></li></ul><h2 id="3-1-打包-／-解包"><a href="#3-1-打包-／-解包" class="headerlink" title="3.1 打包 ／ 解包"></a>3.1 打包 ／ 解包</h2><ul><li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li><li><code>tar</code> 的命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包文件</span></span><br><span class="line">tar -cvf 打包文件.tar 被打包的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包文件</span></span><br><span class="line">tar -xvf 打包文件.tar</span><br></pre></td></tr></table></figure><ul><li><code>tar</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table><blockquote><p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p></blockquote><h3 id="打包解包演练"><a href="#打包解包演练" class="headerlink" title="打包解包演练"></a>打包解包演练</h3><ol><li>删除桌面下的所有内容</li><li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li><li>将这三个文件打一个 <code>py.tar</code> 的包</li><li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li><li>解包 <code>py.tar</code></li></ol><h2 id="3-2-压缩／解压缩"><a href="#3-2-压缩／解压缩" class="headerlink" title="3.2 压缩／解压缩"></a>3.2 压缩／解压缩</h2><h3 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1) gzip"></a>1) <code>gzip</code></h3><ul><li>tar与gzip命令结合可以使用实现文件打包和压缩<ul><li><code>tar</code> 只负责打包文件，但不压缩</li><li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li></ul></li></ul><blockquote><p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p></blockquote><ul><li>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩到指定路径</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：要解压缩的目录必须存在</td></tr></tbody></table><h3 id="2-bzip2"><a href="#2-bzip2" class="headerlink" title="2) bzip2"></a>2) <code>bzip2</code></h3><ul><li><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）<ul><li><code>tar</code> 只负责打包文件，但不压缩，</li><li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li></ul></li><li>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">tar -jxvf 打包文件.tar.bz2</span><br></pre></td></tr></table></figure><h1 id="4-软件安装"><a href="#4-软件安装" class="headerlink" title="4. 软件安装"></a>4. 软件安装</h1><h2 id="4-1-通过-apt-安装／卸载软件"><a href="#4-1-通过-apt-安装／卸载软件" class="headerlink" title="4.1 通过 apt 安装／卸载软件"></a>4.1 通过 apt 安装／卸载软件</h2><ul><li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li><li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安装软件</span></span><br><span class="line">$ sudo apt install 软件包</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 卸载软件</span></span><br><span class="line">$ sudo apt remove 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更新已安装的包</span></span><br><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="安装演练"><a href="#安装演练" class="headerlink" title="安装演练"></a>安装演练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个小火车提示</span></span><br><span class="line">$ sudo apt install sl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个比较漂亮的查看当前进程排名的软件</span></span><br><span class="line">$ sudo apt install htop</span><br></pre></td></tr></table></figure><h2 id="4-2-配置软件源"><a href="#4-2-配置软件源" class="headerlink" title="4.2 配置软件源"></a>4.2 配置软件源</h2><p>在Ubantu18.04版本在系统设置里面是找不到软件源设置界面按钮的，可用如下指令帮助启动图形界面以便设置软件源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-manager -c -d</span><br></pre></td></tr></table></figure><ul><li><p>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</p></li><li><p>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</p></li></ul><blockquote><p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-查找文件&quot;&gt;&lt;a href=&quot;#1-查找文件&quot; class=&quot;headerlink&quot; title=&quot;1. 查找文件&quot;&gt;&lt;/a&gt;1. 查找文件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; 命令功能非常强大，通常用来在 &lt;strong&gt;特定的目录
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础06-系统信息相关命令</title>
    <link href="https://codave.github.io/2019/03/24/Linux%E5%9F%BA%E7%A1%8006-%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/24/Linux基础06-系统信息相关命令/</id>
    <published>2019-03-24T05:02:08.000Z</published>
    <updated>2019-03-24T05:32:16.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-时间和日期"><a href="#1-时间和日期" class="headerlink" title="1. 时间和日期"></a>1. 时间和日期</h1><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>date</td><td>查看系统时间</td></tr><tr><td>02</td><td>cal</td><td><code>calendar</code> 查看日历，<code>-y</code> 选项可以查看一年的日历</td></tr></tbody></table><h1 id="2-磁盘信息"><a href="#2-磁盘信息" class="headerlink" title="2. 磁盘信息"></a>2. 磁盘信息</h1><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>df -h</td><td><code>disk free</code> 显示磁盘剩余空间</td></tr><tr><td>02</td><td>du -h [目录名]</td><td><code>disk usage</code> 显示目录下的文件大小</td></tr></tbody></table><ul><li>选项说明</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-h</td><td>以人性化的方式显示文件大小</td></tr></tbody></table><h1 id="3-进程信息"><a href="#3-进程信息" class="headerlink" title="3. 进程信息"></a>3. 进程信息</h1><ul><li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ps aux</td><td><code>process status</code> 查看进程的详细状况</td></tr><tr><td>02</td><td>top</td><td>动态显示运行中的进程并且排序</td></tr><tr><td>03</td><td>kill [-9] 进程代号</td><td>终止指定代号的进程，<code>-9</code> 表示强行终止</td></tr></tbody></table><blockquote><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p></blockquote><ul><li><code>ps</code> 选项说明功能</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>u</td><td>显示进程的详细状态</td></tr><tr><td>x</td><td>显示没有控制终端的进程</td></tr></tbody></table><blockquote><p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p><ul><li>要退出 <code>top</code> 可以直接输入 <code>q</code></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-时间和日期&quot;&gt;&lt;a href=&quot;#1-时间和日期&quot; class=&quot;headerlink&quot; title=&quot;1. 时间和日期&quot;&gt;&lt;/a&gt;1. 时间和日期&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础05-用户权限相关命令</title>
    <link href="https://codave.github.io/2019/03/24/Linux%E5%9F%BA%E7%A1%8005-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/24/Linux基础05-用户权限相关命令/</id>
    <published>2019-03-24T05:00:11.000Z</published>
    <updated>2019-03-24T07:06:01.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-用户-和-权限-的基本概念"><a href="#1-用户-和-权限-的基本概念" class="headerlink" title="1. 用户 和 权限 的基本概念"></a>1. <strong>用户</strong> 和 <strong>权限</strong> 的基本概念</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><ul><li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li><li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li><li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li><li>对 <strong>文件／目录</strong> 的权限包括：</li></ul><table><thead><tr><th>序号</th><th>权限</th><th>英文</th><th>缩写</th><th>数字代号</th></tr></thead><tbody><tr><td>01</td><td>读</td><td>read</td><td>r</td><td>4</td></tr><tr><td>02</td><td>写</td><td>write</td><td>w</td><td>2</td></tr><tr><td>03</td><td>执行</td><td>excute</td><td>x</td><td>1</td></tr></tbody></table><h2 id="1-2-组"><a href="#1-2-组" class="headerlink" title="1.2 组"></a>1.2 组</h2><ul><li><p>为了方便用户管理，提出了 <strong>组</strong> 的概念</p></li><li><p>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></p></li></ul><h2 id="1-3-ls-l-扩展"><a href="#1-3-ls-l-扩展" class="headerlink" title="1.3 ls -l 扩展"></a>1.3 ls -l 扩展</h2><ul><li><p><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：</p><ul><li><p><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</p></li><li><p><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件</p></li><li><p><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</p></li><li><p><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</p></li><li><p><strong>大小</strong></p></li><li><p><strong>时间</strong></p></li><li><p><strong>名称</strong></p></li></ul></li></ul><p><img src="/2019/03/24/Linux基础05-用户权限相关命令/002_权限示意图.png" alt="002_权限示意图">￼</p><h2 id="1-4-chmod-简单使用"><a href="#1-4-chmod-简单使用" class="headerlink" title="1.4 chmod 简单使用"></a>1.4 <code>chmod</code> 简单使用</h2><ul><li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></table></figure><blockquote><p>提示：以上方式会一次性修改 <code>拥有者</code> / <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p></blockquote><h2 id="1-5-超级用户"><a href="#1-5-超级用户" class="headerlink" title="1.5 超级用户"></a>1.5 超级用户</h2><ul><li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li><li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li><li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li></ul><p><strong>sudo</strong></p><ul><li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li><li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li><li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li></ul><blockquote><p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p></blockquote><h1 id="2-组管理-终端命令"><a href="#2-组管理-终端命令" class="headerlink" title="2. 组管理 终端命令"></a>2. <strong>组管理</strong> 终端命令</h1><blockquote><p>提示：<strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>groupadd 组名</td><td>添加组</td></tr><tr><td>02</td><td>groupdel 组名</td><td>删除组</td></tr><tr><td>03</td><td>cat /etc/group</td><td>确认组信息</td></tr><tr><td>04</td><td>chgrp -R 组名 文件/目录名</td><td>递归修改文件/目录的所属组</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>组信息保存在 <code>/etc/group</code> 文件中</li><li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul></blockquote><h2 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h2><ol><li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li><li>新建 <code>dev</code> 组</li><li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li></ol><h1 id="3-用户管理-终端命令"><a href="#3-用户管理-终端命令" class="headerlink" title="3. 用户管理 终端命令"></a>3. <strong>用户管理</strong> 终端命令</h1><blockquote><p>提示：<strong>创建用户</strong> / <strong>删除用户</strong> / <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><h2 id="3-1-创建用户／设置密码／删除用户"><a href="#3-1-创建用户／设置密码／删除用户" class="headerlink" title="3.1 创建用户／设置密码／删除用户"></a>3.1 创建用户／设置密码／删除用户</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>useradd -m -g 组 新建用户名</td><td>添加新用户</td><td>-m 自动建立用户家目录-g 指定用户所在的组，否则会建立一个和同名的组</td></tr><tr><td>02</td><td>passwd 用户名</td><td>设置用户密码</td><td>如果是普通用户，直接用 passwd 可以修改自己的账户密码</td></tr><tr><td>03</td><td>userdel -r 用户名</td><td>删除用户</td><td>-r 选项会自动删除用户家目录</td></tr><tr><td>04</td><td>cat /etc/passwd \</td><td>grep 用户名</td><td>确认用户信息</td><td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li><li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li><li>用户信息保存在 <code>/etc/passwd</code> 文件中</li></ul></blockquote><h2 id="3-2-查看用户信息"><a href="#3-2-查看用户信息" class="headerlink" title="3.2 查看用户信息"></a>3.2 查看用户信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>id [用户名]</td><td>查看用户 UID 和 GID 信息</td></tr><tr><td>02</td><td>who</td><td>查看当前所有登录的用户列表</td></tr><tr><td>03</td><td>whoami</td><td>查看当前登录用户的账户名</td></tr></tbody></table><h3 id="passwd-文件"><a href="#passwd-文件" class="headerlink" title="passwd 文件"></a>passwd 文件</h3><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号</li><li>家目录</li><li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li></ol><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><ul><li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li><li><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li><li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></li></ul><blockquote><p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改用户的主组（passwd 中的 GID）</span></span><br><span class="line">usermod -g 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户的附加组</span></span><br><span class="line">usermod -G 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户登录 Shell</span></span><br><span class="line">usermod -s /bin/bash 用户名</span><br></pre></td></tr></table></figure><blockquote><p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G sudo 用户名</span><br></pre></td></tr></table></figure><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><blockquote><p>提示</p><ul><li><code>/etc/passwd</code> 是用于保存用户信息的文件</li><li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li></ul></blockquote><ul><li><code>which</code> 命令可以查看执行命令所在位置，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /bin/ls</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> useradd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /usr/sbin/useradd</span></span><br></pre></td></tr></table></figure><h3 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h3><ul><li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li><li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li><li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li><li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li><li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li></ul><blockquote><p>提示：</p><ul><li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li></ul></blockquote><h2 id="3-3-切换用户"><a href="#3-3-切换用户" class="headerlink" title="3.3 切换用户"></a>3.3 切换用户</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>su - 用户名</td><td>切换用户，并且切换目录</td><td>- 可以切换到用户家目录，否则保持位置不变</td></tr><tr><td>02</td><td>exit</td><td>退出当前登录账户</td></tr></tbody></table><ul><li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li><li><code>exit</code> 示意图如下：</li></ul><p><img src="/2019/03/24/Linux基础05-用户权限相关命令/003_su和exit示意图.png" alt="003_su和exit示意图"></p><h1 id="4-修改文件权限"><a href="#4-修改文件权限" class="headerlink" title="4. 修改文件权限"></a>4. 修改文件权限</h1><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>chown</td><td>修改拥有者</td></tr><tr><td>02</td><td>chgrp</td><td>修改组</td></tr><tr><td>03</td><td>chmod</td><td>修改权限</td></tr></tbody></table><ul><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改文件|目录的拥有者</span></span><br><span class="line">chown 用户名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件|目录的组</span></span><br><span class="line">chgrp -R 组名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件权限</span></span><br><span class="line">chmod -R 755 文件名|目录名</span><br></pre></td></tr></table></figure><ul><li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他</span></span><br><span class="line">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></table></figure><p><img src="/2019/03/24/Linux基础05-用户权限相关命令/004_文件权限示意图.png" alt="004_文件权限示意图">￼</p><ul><li><p>常见数字组合有（u表示用户／g表示组／o表示其他）：</p><ul><li><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code></li><li><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></li><li><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></li></ul></li></ul><h2 id="chmod-演练目标"><a href="#chmod-演练目标" class="headerlink" title="chmod 演练目标"></a><code>chmod</code> 演练目标</h2><ol><li>将 <code>01.py</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code></li><li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code></li><li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-用户-和-权限-的基本概念&quot;&gt;&lt;a href=&quot;#1-用户-和-权限-的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 用户 和 权限 的基本概念&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;用户&lt;/strong&gt; 和 &lt;strong&gt;权限&lt;/str
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础04-字符串</title>
    <link href="https://codave.github.io/2019/03/23/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8004-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://codave.github.io/2019/03/23/Python语法基础04-字符串/</id>
    <published>2019-03-23T04:22:58.000Z</published>
    <updated>2019-03-23T09:18:10.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-字符串的定义"><a href="#1-字符串的定义" class="headerlink" title="1. 字符串的定义"></a>1. 字符串的定义</h1><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li><li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li><li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li></ul><blockquote><p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Hello Python"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><p><img src="/2019/03/23/Python语法基础04-字符串/005_字符串示意图.png" alt="005_字符串示意图-w500"></p><h1 id="2-字符串的常用操作"><a href="#2-字符串的常用操作" class="headerlink" title="2. 字符串的常用操作"></a>2. 字符串的常用操作</h1><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li><li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [1]: hello_str.</span><br><span class="line">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class="line">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class="line">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class="line">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class="line">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class="line">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class="line">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class="line">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class="line">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class="line">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class="line">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class="line">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class="line">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class="line">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class="line">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure><blockquote><p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p></blockquote><h2 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h2 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h2 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h2 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h2 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h2 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h1 id="3-字符串的切片"><a href="#3-字符串的切片" class="headerlink" title="3. 字符串的切片"></a>3. 字符串的切片</h1><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul></li></ul><p><img src="/2019/03/23/Python语法基础04-字符串/006_字符串索引示意图.png" alt="006_字符串索引示意图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><p><strong>索引的顺序和倒序</strong></p><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><h1 id="4-演练需求"><a href="#4-演练需求" class="headerlink" title="4. 演练需求"></a>4. 演练需求</h1><ul><li><ol><li>截取从 2 ~ 5 位置 的字符串</li></ol></li><li><ol start="2"><li>截取从 2 ~ <code>末尾</code> 的字符串</li></ol></li><li><ol start="3"><li>截取从 <code>开始</code> ~ 5 位置 的字符串</li></ol></li><li><ol start="4"><li>截取完整的字符串</li></ol></li><li><ol start="5"><li>从开始位置，每隔一个字符截取字符串</li></ol></li><li><ol start="6"><li>从索引 1 开始，每隔一个取一个</li></ol></li><li><ol start="7"><li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li></ol></li><li><ol start="8"><li>截取字符串末尾两个字符</li></ol></li><li><ol start="9"><li>字符串的逆序（面试题）</li></ol></li></ul><p><strong>答案</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">num_str = &quot;0123456789&quot;</span><br><span class="line"></span><br><span class="line"># 1. 截取从 2 ~ 5 位置 的字符串</span><br><span class="line">print(num_str[2:6])</span><br><span class="line"></span><br><span class="line"># 2. 截取从 2 ~ `末尾` 的字符串</span><br><span class="line">print(num_str[2:])</span><br><span class="line"></span><br><span class="line"># 3. 截取从 `开始` ~ 5 位置 的字符串</span><br><span class="line">print(num_str[:6])</span><br><span class="line"></span><br><span class="line"># 4. 截取完整的字符串</span><br><span class="line">print(num_str[:])</span><br><span class="line"></span><br><span class="line"># 5. 从开始位置，每隔一个字符截取字符串</span><br><span class="line">print(num_str[::2])</span><br><span class="line"></span><br><span class="line"># 6. 从索引 1 开始，每隔一个取一个</span><br><span class="line">print(num_str[1::2])</span><br><span class="line"></span><br><span class="line"># 倒序切片</span><br><span class="line"># -1 表示倒数第一个字符</span><br><span class="line">print(num_str[-1])</span><br><span class="line"></span><br><span class="line"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span><br><span class="line">print(num_str[2:-1])</span><br><span class="line"></span><br><span class="line"># 8. 截取字符串末尾两个字符</span><br><span class="line">print(num_str[-2:])</span><br><span class="line"></span><br><span class="line"># 9. 字符串的逆序（面试题）</span><br><span class="line">print(num_str[::-1])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-字符串的定义&quot;&gt;&lt;a href=&quot;#1-字符串的定义&quot; class=&quot;headerlink&quot; title=&quot;1. 字符串的定义&quot;&gt;&lt;/a&gt;1. 字符串的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符串&lt;/strong&gt; 就是 &lt;strong&gt;一串字符&lt;/
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="str" scheme="https://codave.github.io/tags/str/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础03-字典</title>
    <link href="https://codave.github.io/2019/03/23/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8003-%E5%AD%97%E5%85%B8/"/>
    <id>https://codave.github.io/2019/03/23/Python语法基础03-字典/</id>
    <published>2019-03-23T04:22:05.000Z</published>
    <updated>2019-03-23T09:22:09.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-字典的定义"><a href="#1-字典的定义" class="headerlink" title="1. 字典的定义"></a>1. 字典的定义</h1><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>字典同样可以用来 <strong>存储多个数据</strong><ul><li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> </li></ul></li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典用 <code>{}</code> 定义</li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"gender"</span>: <span class="keyword">True</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.75</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/23/Python语法基础03-字典/002_字典示意图.png" alt="002_字典示意图"></p><h1 id="2-字典常用操作"><a href="#2-字典常用操作" class="headerlink" title="2. 字典常用操作"></a>2. 字典常用操作</h1><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = {}</code></li><li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [1]: xiaoming.</span><br><span class="line">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span><br><span class="line">xiaoming.copy        xiaoming.keys        xiaoming.update</span><br><span class="line">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span><br><span class="line">xiaoming.get         xiaoming.popitem</span><br></pre></td></tr></table></figure><blockquote><p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h1 id="3-循环遍历"><a href="#3-循环遍历" class="headerlink" title="3. 循环遍历"></a>3. 循环遍历</h1><ul><li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的 `key 的变量` in 字典</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xiaoming:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"%s: %s"</span> % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure><blockquote><p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p></blockquote><h1 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4. 应用场景"></a>4. <strong>应用场景</strong></h1><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li><li>但是在开发中，更多的应用场景是：<ul><li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li><li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">card_list = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"12345"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"110"</span>&#125;,</span><br><span class="line">             &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"54321"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"10086"</span>&#125;</span><br><span class="line">             ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-字典的定义&quot;&gt;&lt;a href=&quot;#1-字典的定义&quot; class=&quot;headerlink&quot; title=&quot;1. 字典的定义&quot;&gt;&lt;/a&gt;1. 字典的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dictionary&lt;/code&gt;（字典） 是 &lt;strong&gt;除列表以
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="dict" scheme="https://codave.github.io/tags/dict/"/>
    
      <category term="字典" scheme="https://codave.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础02-元组</title>
    <link href="https://codave.github.io/2019/03/23/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8002-%E5%85%83%E7%BB%84/"/>
    <id>https://codave.github.io/2019/03/23/Python语法基础02-元组/</id>
    <published>2019-03-23T04:20:51.000Z</published>
    <updated>2019-03-23T09:21:36.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-元组"><a href="#1-元组" class="headerlink" title="1. 元组"></a>1. 元组</h1><h2 id="1-1-元组的定义"><a href="#1-1-元组的定义" class="headerlink" title="1.1 元组的定义"></a>1.1 元组的定义</h2><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul><li><strong>元组</strong> 表示多个元素组成的序列</li><li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li></ul></li><li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>元组用 <code>()</code> 定义</li><li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="string">"zhangsan"</span>, <span class="number">18</span>, <span class="number">1.75</span>)</span><br></pre></td></tr></table></figure><p><strong>创建空元组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = ()</span><br></pre></td></tr></table></figure><p><strong>元组中只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="number">50</span>, )</span><br></pre></td></tr></table></figure><p><img src="/2019/03/23/Python语法基础02-元组/003_元组示意图.png" alt="003_元组示意图-w500"></p><h2 id="1-2-元组常用操作"><a href="#1-2-元组常用操作" class="headerlink" title="1.2 元组常用操作"></a>1.2 元组常用操作</h2><ul><li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li><li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info.count  info.index</span><br></pre></td></tr></table></figure><blockquote><p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h2 id="1-3-循环遍历"><a href="#1-3-循环遍历" class="headerlink" title="1.3 循环遍历"></a>1.3 循环遍历</h2><ul><li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li><li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 元组</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line"></span><br><span class="line">    循环内部针对元组元素进行操作</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><blockquote><ul><li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li><li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li></ul></blockquote><h2 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 应用场景</h2><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li><li>但是在开发中，更多的应用场景是：<ul><li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul><li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li></ul></li><li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li><li><strong>让列表不可以被修改</strong>，以保护数据安全</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">"zhangsan"</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"%s 的年龄是 %d"</span> % info)</span><br></pre></td></tr></table></figure><h1 id="2-元组和列表之间的转换"><a href="#2-元组和列表之间的转换" class="headerlink" title="2.  元组和列表之间的转换"></a>2.  元组和列表之间的转换</h1><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(元组)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple(列表)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-元组&quot;&gt;&lt;a href=&quot;#1-元组&quot; class=&quot;headerlink&quot; title=&quot;1. 元组&quot;&gt;&lt;/a&gt;1. 元组&lt;/h1&gt;&lt;h2 id=&quot;1-1-元组的定义&quot;&gt;&lt;a href=&quot;#1-1-元组的定义&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="tuple" scheme="https://codave.github.io/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础01-列表</title>
    <link href="https://codave.github.io/2019/03/22/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8001-%E5%88%97%E8%A1%A8/"/>
    <id>https://codave.github.io/2019/03/22/Python语法基础01-列表/</id>
    <published>2019-03-22T13:07:49.000Z</published>
    <updated>2019-03-23T09:19:29.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-知识点提要"><a href="#1-知识点提要" class="headerlink" title="1. 知识点提要"></a>1. 知识点提要</h1><ul><li>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li><p>非数字型</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li><li><p>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p><ol><li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li><li><strong>取值</strong> <code>[]</code></li><li><strong>遍历</strong> <code>for in</code></li><li><strong>计算长度</strong>、<strong>最大/最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li><li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li><li><strong>切片</strong></li></ol></li></ul><h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><h2 id="2-1-列表的定义"><a href="#2-1-列表的定义" class="headerlink" title="2.1 列表的定义"></a>2.1 列表的定义</h2><ul><li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li><li>专门用于存储 <strong>一串 信息</strong></li><li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li></ul></li></ul><blockquote><p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</span><br></pre></td></tr></table></figure><p><img src="/2019/03/22/Python语法基础01-列表/001_列表示意图.png" alt="001_列表示意图"></p><h2 id="2-2-列表常用操作"><a href="#2-2-列表常用操作" class="headerlink" title="2.2 列表常用操作"></a>2.2 列表常用操作</h2><ul><li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li><li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: name_list.</span><br><span class="line">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class="line">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class="line">name_list.copy     name_list.index    name_list.remove</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h3 id="del-关键字"><a href="#del-关键字" class="headerlink" title="del 关键字"></a>del 关键字</h3><ul><li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li><li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li><li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> name_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p></blockquote><h3 id="关键字、函数和方法"><a href="#关键字、函数和方法" class="headerlink" title="关键字、函数和方法"></a>关键字、函数和方法</h3><ul><li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">2</span>]: print(keyword.kwlist)</span><br><span class="line">In [<span class="number">3</span>]: print(len(keyword.kwlist))</span><br></pre></td></tr></table></figure><blockquote><p>关键字后面不需要使用括号</p></blockquote><ul><li><strong>函数</strong> 封装了独立功能，可以直接调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>函数需要死记硬背</p></blockquote><ul><li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li><li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.方法名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p></blockquote><h2 id="2-3-循环遍历"><a href="#2-3-循环遍历" class="headerlink" title="2.3 循环遍历"></a>2.3 循环遍历</h2><ul><li><p><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据</p><ul><li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li></ul></li><li><p>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></p></li><li>使用 <code>for</code> 就能够实现迭代遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 列表</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#循环内部针对列表元素进行操作</span></span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p><img src="/2019/03/22/Python语法基础01-列表/002_forin循环流程图.png" alt="002_forin循环流程图-w420"></p><h2 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 <strong>应用场景</strong></h2><ul><li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>但是在开发中，更多的应用场景是：<ol><li><strong>列表</strong> 存储相同类型的数据</li><li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-知识点提要&quot;&gt;&lt;a href=&quot;#1-知识点提要&quot; class=&quot;headerlink&quot; title=&quot;1. 知识点提要&quot;&gt;&lt;/a&gt;1. 知识点提要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Python 中数据类型可以分为 &lt;strong&gt;数字型&lt;/strong&gt; 和 &lt;s
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="list" scheme="https://codave.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础04-远程管理命令</title>
    <link href="https://codave.github.io/2019/03/21/Linux%E5%9F%BA%E7%A1%8004-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/21/Linux基础04-远程管理命令/</id>
    <published>2019-03-21T13:14:25.000Z</published>
    <updated>2019-03-24T04:54:22.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-关机-重启"><a href="#1-关机-重启" class="headerlink" title="1.关机/重启"></a>1.关机/重启</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>含义</th></tr></thead><tbody><tr><td>01</td><td>shutdown  选项  时间</td><td>shutdown</td><td>关机/重新启动</td></tr></tbody></table><h2 id="1-1-shutdown"><a href="#1-1-shutdown" class="headerlink" title="1.1 shutdown"></a>1.1 shutdown</h2><ul><li><code>shutdown</code>命令可以<strong>安全关闭</strong>或者重新启动系统</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr></tbody></table><blockquote><p><strong>提示</strong>：</p><ul><li><strong>不指定选项和参数</strong>，默认表示<strong>1分钟</strong>之后关闭电脑</li><li>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</li></ul></blockquote><ul><li><p>常用命令示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重新启动操作系统，其中 now 表示现在</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shutdown -r now</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">立刻关机，其中 now 表示现在</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shutdown now</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">系统在今天的 13:14 会关机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shutdown 13:14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">系统再过十分钟后自动关机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shutdown +10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取消之前指定的关机计划</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shutdown -c</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="2-查看或配置网卡信息"><a href="#2-查看或配置网卡信息" class="headerlink" title="2. 查看或配置网卡信息"></a>2. 查看或配置网卡信息</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>configure a network interface</td><td>查看/配置计算机当前的网卡配置信息</td></tr><tr><td>02</td><td>ping ip地址</td><td>ping</td><td>检测到目标ip地址的链接是否正常</td></tr></tbody></table><h2 id="2-1-ifconfig"><a href="#2-1-ifconfig" class="headerlink" title="2.1 ifconfig"></a>2.1 ifconfig</h2><ul><li><p><code>ifconfig</code>可以查看/配置计算机当前的网卡配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看网卡配置信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看网卡对应的IP地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifconfig | grep inet</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：一台计算机中有可能会有一个物理地址和多个虚拟网卡，在Linux中物理网卡的名字通常以<code>ensXX</code>表示</p></blockquote></li><li><p><code>127.0.0.1</code>被称为本地回环/环回地址，一般用来测试本机网卡是否正常</p></li></ul><h2 id="2-2-ping"><a href="#2-2-ping" class="headerlink" title="2.2 ping"></a>2.2 ping</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检测到目标主机是否连接正常</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">检测本地网卡工作正常</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 127.0.0.1</span></span><br></pre></td></tr></table></figure><ul><li><p><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>，<strong>数值越大，速度越慢</strong></p><blockquote><ul><li><code>ping</code>的的工作原理与潜水艇的声纳相似，<code>ping</code>这个命令就是取自声呐的声音</li><li>网络管理员之间也常将<code>ping</code>用作动词——<strong>ping一下计算机X，看他是否开着</strong></li></ul></blockquote></li></ul><h1 id="3-远程登录和复制文件"><a href="#3-远程登录和复制文件" class="headerlink" title="3. 远程登录和复制文件"></a>3. 远程登录和复制文件</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh  用户名@ip</td><td>secure shell</td><td>关机/重新启动</td></tr><tr><td>02</td><td>scp  用户名@ip：文件名或路径  用户名@ip：文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h2 id="3-1-ssh基础"><a href="#3-1-ssh基础" class="headerlink" title="3.1 ssh基础"></a>3.1 ssh基础</h2><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p><ul><li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li><li><code>ssh</code>是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议<ul><li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li><li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li></ul></li><li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li></ul><h3 id="1-域名-和-端口号"><a href="#1-域名-和-端口号" class="headerlink" title="1) 域名 和 端口号"></a>1) 域名 和 端口号</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><ul><li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li><li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li></ul><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><ul><li><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></li><li><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong><ul><li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li></ul></li><li>常见服务端口号列表：</li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH服务器</td><td>22</td></tr><tr><td>02</td><td>Web服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP服务器</td><td>21</td></tr></tbody></table><h3 id="2-SSH-客户端的简单使用"><a href="#2-SSH-客户端的简单使用" class="headerlink" title="2) SSH 客户端的简单使用"></a>2) SSH 客户端的简单使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [-p port] user@remote</span><br></pre></td></tr></table></figure><ul><li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li><li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li><li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li></ul><blockquote><p>提示：</p><ul><li>使用 <code>exit</code> 退出当前用户的登录</li></ul><p>注意：</p><ul><li><code>ssh</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code> 或者 <code>XShell</code> 客户端软件即可</li></ul><p>提示：</p><ul><li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li></ul></blockquote><h3 id="3-Windows-下-SSH-客户端的安装"><a href="#3-Windows-下-SSH-客户端的安装" class="headerlink" title="3) Windows 下 SSH 客户端的安装"></a>3) Windows 下 SSH 客户端的安装</h3><ul><li><code>Putty</code> <a href="http://www.chiark.greenend.org.uk/%7Esgtatham/putty/latest.html" target="_blank" rel="noopener">http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li><li><code>XShell</code> <a href="http://xshellcn.com" target="_blank" rel="noopener">http://xshellcn.com</a></li></ul><blockquote><p>建议从官方网站下载正式的安装程序</p></blockquote><h2 id="3-2-scp"><a href="#3-2-scp" class="headerlink" title="3.2 scp"></a>3.2 <code>scp</code></h2><ul><li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li><li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span></span><br><span class="line"><span class="comment"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span></span><br><span class="line">scp -P port 01.py user@remote:Desktop/01.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span></span><br><span class="line">scp -P port user@remote:Desktop/01.py 01.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 -r 选项可以传送文件夹</span></span><br><span class="line"><span class="comment"># 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktop</span></span><br><span class="line">scp -r demo user@remote:Desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span></span><br><span class="line">scp -r user@remote:Desktop demo</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code>，使用 <code>pscp</code> 命令行工具或者安装 <code>FileZilla</code> 使用 <code>FTP</code> 进行文件传输</li></ul></blockquote><h3 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a><code>FileZilla</code></h3><ul><li>官方网站：<a href="https://www.filezilla.cn/download/client" target="_blank" rel="noopener">https://www.filezilla.cn/download/client</a></li><li><code>FileZilla</code> 在传输文件时，使用的是 <code>FTP 服务</code> 而不是 <code>SSH 服务</code>，因此端口号应该设置为 <code>21</code></li></ul><h2 id="3-3-SSH-高级"><a href="#3-3-SSH-高级" class="headerlink" title="3.3 SSH 高级"></a>3.3 SSH 高级</h2><ul><li>免密码登录</li><li>配置别名</li></ul><blockquote><p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下</p></blockquote><h3 id="1）免密码登录"><a href="#1）免密码登录" class="headerlink" title="1）免密码登录"></a>1）免密码登录</h3><p><strong>步骤</strong></p><ul><li>配置公钥<ul><li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li></ul></li><li>上传公钥到服务器<ul><li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li></ul></li></ul><blockquote><p>非对称加密算法</p><ul><li>使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密</li><li>使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密</li></ul></blockquote><h3 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2) 配置别名"></a>2) 配置别名</h3><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p><p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host mac</span><br><span class="line">    HostName ip地址</span><br><span class="line">    User itheima</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><p><strong>保存之后，即可用 ssh mac 实现远程登录了，scp 同样可以使用</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-关机-重启&quot;&gt;&lt;a href=&quot;#1-关机-重启&quot; class=&quot;headerlink&quot; title=&quot;1.关机/重启&quot;&gt;&lt;/a&gt;1.关机/重启&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;对应英文
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
