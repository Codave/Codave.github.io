<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未来可期</title>
  
  <subtitle>技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codave.github.io/"/>
  <updated>2019-03-23T04:40:35.569Z</updated>
  <id>https://codave.github.io/</id>
  
  <author>
    <name>Codave</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python语法基础04-字符串</title>
    <link href="https://codave.github.io/2019/03/23/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8004-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://codave.github.io/2019/03/23/Python语法基础04-字符串/</id>
    <published>2019-03-23T04:22:58.000Z</published>
    <updated>2019-03-23T04:40:35.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04-字符串"><a href="#04-字符串" class="headerlink" title="04. 字符串"></a>04. 字符串</h1><h2 id="4-1-字符串的定义"><a href="#4-1-字符串的定义" class="headerlink" title="4.1 字符串的定义"></a>4.1 字符串的定义</h2><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li><li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li><li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li></ul><blockquote><p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Hello Python"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><p><img src="/2019/03/23/Python语法基础04-字符串/F:/Blog_github\source\_posts\Python语法基础04-字符串\005_字符串示意图.png" alt="005_字符串示意图-w500"></p><h2 id="4-2-字符串的常用操作"><a href="#4-2-字符串的常用操作" class="headerlink" title="4.2 字符串的常用操作"></a>4.2 字符串的常用操作</h2><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li><li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [1]: hello_str.</span><br><span class="line">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class="line">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class="line">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class="line">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class="line">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class="line">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class="line">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class="line">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class="line">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class="line">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class="line">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class="line">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class="line">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class="line">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class="line">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure><blockquote><p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p></blockquote><h3 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h3 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h3 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h3 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h3 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h3 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h2 id="4-3-字符串的切片"><a href="#4-3-字符串的切片" class="headerlink" title="4.3 字符串的切片"></a>4.3 字符串的切片</h2><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul></li></ul><p><img src="/2019/03/23/Python语法基础04-字符串/F:/Blog_github\source\_posts\Python语法基础04-字符串\006_字符串索引示意图.png" alt="006_字符串索引示意图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><p><strong>演练需求</strong></p><ul><li><ol><li>截取从 2 ~ 5 位置 的字符串</li></ol></li><li><ol start="2"><li>截取从 2 ~ <code>末尾</code> 的字符串</li></ol></li><li><ol start="3"><li>截取从 <code>开始</code> ~ 5 位置 的字符串</li></ol></li><li><ol start="4"><li>截取完整的字符串</li></ol></li><li><ol start="5"><li>从开始位置，每隔一个字符截取字符串</li></ol></li><li><ol start="6"><li>从索引 1 开始，每隔一个取一个</li></ol></li><li><ol start="7"><li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li></ol></li><li><ol start="8"><li>截取字符串末尾两个字符</li></ol></li><li><ol start="9"><li>字符串的逆序（面试题）</li></ol></li></ul><p><strong>答案</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">num_str = &quot;0123456789&quot;</span><br><span class="line"></span><br><span class="line"># 1. 截取从 2 ~ 5 位置 的字符串</span><br><span class="line">print(num_str[2:6])</span><br><span class="line"></span><br><span class="line"># 2. 截取从 2 ~ `末尾` 的字符串</span><br><span class="line">print(num_str[2:])</span><br><span class="line"></span><br><span class="line"># 3. 截取从 `开始` ~ 5 位置 的字符串</span><br><span class="line">print(num_str[:6])</span><br><span class="line"></span><br><span class="line"># 4. 截取完整的字符串</span><br><span class="line">print(num_str[:])</span><br><span class="line"></span><br><span class="line"># 5. 从开始位置，每隔一个字符截取字符串</span><br><span class="line">print(num_str[::2])</span><br><span class="line"></span><br><span class="line"># 6. 从索引 1 开始，每隔一个取一个</span><br><span class="line">print(num_str[1::2])</span><br><span class="line"></span><br><span class="line"># 倒序切片</span><br><span class="line"># -1 表示倒数第一个字符</span><br><span class="line">print(num_str[-1])</span><br><span class="line"></span><br><span class="line"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span><br><span class="line">print(num_str[2:-1])</span><br><span class="line"></span><br><span class="line"># 8. 截取字符串末尾两个字符</span><br><span class="line">print(num_str[-2:])</span><br><span class="line"></span><br><span class="line"># 9. 字符串的逆序（面试题）</span><br><span class="line">print(num_str[::-1])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;04-字符串&quot;&gt;&lt;a href=&quot;#04-字符串&quot; class=&quot;headerlink&quot; title=&quot;04. 字符串&quot;&gt;&lt;/a&gt;04. 字符串&lt;/h1&gt;&lt;h2 id=&quot;4-1-字符串的定义&quot;&gt;&lt;a href=&quot;#4-1-字符串的定义&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="str" scheme="https://codave.github.io/tags/str/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础03-字典</title>
    <link href="https://codave.github.io/2019/03/23/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8003-%E5%AD%97%E5%85%B8/"/>
    <id>https://codave.github.io/2019/03/23/Python语法基础03-字典/</id>
    <published>2019-03-23T04:22:05.000Z</published>
    <updated>2019-03-23T04:40:25.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="03-字典"><a href="#03-字典" class="headerlink" title="03. 字典"></a>03. 字典</h1><h2 id="3-1-字典的定义"><a href="#3-1-字典的定义" class="headerlink" title="3.1 字典的定义"></a>3.1 字典的定义</h2><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>字典同样可以用来 <strong>存储多个数据</strong><ul><li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> </li></ul></li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典用 <code>{}</code> 定义</li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"gender"</span>: <span class="keyword">True</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.75</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/23/Python语法基础03-字典/F:/Blog_github\source\_posts\Python语法基础03-字典\002_字典示意图.png" alt="002_字典示意图"></p><h2 id="3-2-字典常用操作"><a href="#3-2-字典常用操作" class="headerlink" title="3.2 字典常用操作"></a>3.2 字典常用操作</h2><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = {}</code></li><li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [1]: xiaoming.</span><br><span class="line">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span><br><span class="line">xiaoming.copy        xiaoming.keys        xiaoming.update</span><br><span class="line">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span><br><span class="line">xiaoming.get         xiaoming.popitem</span><br></pre></td></tr></table></figure><blockquote><p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h2 id="3-3-循环遍历"><a href="#3-3-循环遍历" class="headerlink" title="3.3 循环遍历"></a>3.3 循环遍历</h2><ul><li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的 `key 的变量` in 字典</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xiaoming:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"%s: %s"</span> % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure><blockquote><p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p></blockquote><h2 id="3-4-应用场景"><a href="#3-4-应用场景" class="headerlink" title="3.4 应用场景"></a>3.4 <strong>应用场景</strong></h2><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li><li>但是在开发中，更多的应用场景是：<ul><li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li><li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">card_list = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"12345"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"110"</span>&#125;,</span><br><span class="line">             &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"54321"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"10086"</span>&#125;</span><br><span class="line">             ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;03-字典&quot;&gt;&lt;a href=&quot;#03-字典&quot; class=&quot;headerlink&quot; title=&quot;03. 字典&quot;&gt;&lt;/a&gt;03. 字典&lt;/h1&gt;&lt;h2 id=&quot;3-1-字典的定义&quot;&gt;&lt;a href=&quot;#3-1-字典的定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="dict" scheme="https://codave.github.io/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础02-元组</title>
    <link href="https://codave.github.io/2019/03/23/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8002-%E5%85%83%E7%BB%84/"/>
    <id>https://codave.github.io/2019/03/23/Python语法基础02-元组/</id>
    <published>2019-03-23T04:20:51.000Z</published>
    <updated>2019-03-23T04:40:14.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="02-元组"><a href="#02-元组" class="headerlink" title="02. 元组"></a>02. 元组</h1><h2 id="2-1-元组的定义"><a href="#2-1-元组的定义" class="headerlink" title="2.1 元组的定义"></a>2.1 元组的定义</h2><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul><li><strong>元组</strong> 表示多个元素组成的序列</li><li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li></ul></li><li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>元组用 <code>()</code> 定义</li><li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="string">"zhangsan"</span>, <span class="number">18</span>, <span class="number">1.75</span>)</span><br></pre></td></tr></table></figure><h4 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = ()</span><br></pre></td></tr></table></figure><h4 id="元组中-只包含一个元素-时，需要-在元素后面添加逗号"><a href="#元组中-只包含一个元素-时，需要-在元素后面添加逗号" class="headerlink" title="元组中 只包含一个元素 时，需要 在元素后面添加逗号"></a>元组中 <strong>只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="number">50</span>, )</span><br></pre></td></tr></table></figure><p><img src="/2019/03/23/Python语法基础02-元组/Python语法基础02-元组003_元组示意图.png" alt="003_元组示意图-w500"></p><h2 id="2-2-元组常用操作"><a href="#2-2-元组常用操作" class="headerlink" title="2.2 元组常用操作"></a>2.2 元组常用操作</h2><ul><li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li><li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info.count  info.index</span><br></pre></td></tr></table></figure><blockquote><p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h2 id="2-3-循环遍历"><a href="#2-3-循环遍历" class="headerlink" title="2.3 循环遍历"></a>2.3 循环遍历</h2><ul><li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li><li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 元组</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line"></span><br><span class="line">    循环内部针对元组元素进行操作</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><blockquote><ul><li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li><li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li></ul></blockquote><h2 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 应用场景</h2><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li><li>但是在开发中，更多的应用场景是：<ul><li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul><li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li></ul></li><li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li><li><strong>让列表不可以被修改</strong>，以保护数据安全</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">"zhangsan"</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"%s 的年龄是 %d"</span> % info)</span><br></pre></td></tr></table></figure><h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(元组)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple(列表)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;02-元组&quot;&gt;&lt;a href=&quot;#02-元组&quot; class=&quot;headerlink&quot; title=&quot;02. 元组&quot;&gt;&lt;/a&gt;02. 元组&lt;/h1&gt;&lt;h2 id=&quot;2-1-元组的定义&quot;&gt;&lt;a href=&quot;#2-1-元组的定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="tuple" scheme="https://codave.github.io/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>Python语法基础01-列表</title>
    <link href="https://codave.github.io/2019/03/22/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8001-%E5%88%97%E8%A1%A8/"/>
    <id>https://codave.github.io/2019/03/22/Python语法基础01-列表/</id>
    <published>2019-03-22T13:07:49.000Z</published>
    <updated>2019-03-23T04:13:18.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点提要"><a href="#知识点提要" class="headerlink" title="知识点提要"></a>知识点提要</h1><ul><li>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li><p>非数字型</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li><li><p>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p><ol><li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li><li><strong>取值</strong> <code>[]</code></li><li><strong>遍历</strong> <code>for in</code></li><li><strong>计算长度</strong>、<strong>最大/最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li><li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li><li><strong>切片</strong></li></ol></li></ul><h1 id="01-列表"><a href="#01-列表" class="headerlink" title="01. 列表"></a>01. 列表</h1><h2 id="1-1-列表的定义"><a href="#1-1-列表的定义" class="headerlink" title="1.1 列表的定义"></a>1.1 列表的定义</h2><ul><li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li><li>专门用于存储 <strong>一串 信息</strong></li><li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li></ul></li></ul><blockquote><p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</span><br></pre></td></tr></table></figure><p><img src="/2019/03/22/Python语法基础01-列表/001_列表示意图.png" alt="001_列表示意图"></p><h2 id="1-2-列表常用操作"><a href="#1-2-列表常用操作" class="headerlink" title="1.2 列表常用操作"></a>1.2 列表常用操作</h2><ul><li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li><li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: name_list.</span><br><span class="line">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class="line">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class="line">name_list.copy     name_list.index    name_list.remove</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h3 id="del-关键字（科普）"><a href="#del-关键字（科普）" class="headerlink" title="del 关键字（科普）"></a>del 关键字（科普）</h3><ul><li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li><li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li><li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> name_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p></blockquote><h3 id="关键字、函数和方法（科普）"><a href="#关键字、函数和方法（科普）" class="headerlink" title="关键字、函数和方法（科普）"></a>关键字、函数和方法（科普）</h3><ul><li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">2</span>]: print(keyword.kwlist)</span><br><span class="line">In [<span class="number">3</span>]: print(len(keyword.kwlist))</span><br></pre></td></tr></table></figure><blockquote><p>关键字后面不需要使用括号</p></blockquote><ul><li><strong>函数</strong> 封装了独立功能，可以直接调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>函数需要死记硬背</p></blockquote><ul><li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li><li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.方法名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p></blockquote><h2 id="1-3-循环遍历"><a href="#1-3-循环遍历" class="headerlink" title="1.3 循环遍历"></a>1.3 循环遍历</h2><ul><li><p><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据</p><ul><li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li></ul></li><li><p>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></p></li><li>使用 <code>for</code> 就能够实现迭代遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 列表</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#循环内部针对列表元素进行操作</span></span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p><img src="/2019/03/22/Python语法基础01-列表/002_forin循环流程图.png" alt="002_forin循环流程图-w420"></p><h2 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 <strong>应用场景</strong></h2><ul><li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>但是在开发中，更多的应用场景是：<ol><li><strong>列表</strong> 存储相同类型的数据</li><li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;知识点提要&quot;&gt;&lt;a href=&quot;#知识点提要&quot; class=&quot;headerlink&quot; title=&quot;知识点提要&quot;&gt;&lt;/a&gt;知识点提要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Python 中数据类型可以分为 &lt;strong&gt;数字型&lt;/strong&gt; 和 &lt;strong&gt;非数字型
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="list" scheme="https://codave.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>【Linux基础】04-远程管理命令</title>
    <link href="https://codave.github.io/2019/03/21/%E3%80%90Linux%E5%9F%BA%E7%A1%80%E3%80%9104-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/21/【Linux基础】04-远程管理命令/</id>
    <published>2019-03-21T13:14:25.000Z</published>
    <updated>2019-03-22T13:47:23.174Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="linux" scheme="https://codave.github.io/categories/linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【Linux基础】03-文件相关命令</title>
    <link href="https://codave.github.io/2019/03/21/%E3%80%90Linux%E5%9F%BA%E7%A1%80%E3%80%9103-%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/21/【Linux基础】03-文件相关命令/</id>
    <published>2019-03-21T12:53:42.000Z</published>
    <updated>2019-03-21T14:42:37.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-创建和删除操作"><a href="#01-创建和删除操作" class="headerlink" title="01 创建和删除操作"></a>01 创建和删除操作</h1><h2 id="1-1-touch"><a href="#1-1-touch" class="headerlink" title="1.1 touch"></a>1.1 touch</h2><ul><li>如果文件不存在，可以创建一个空白文件。</li><li>如果文件已经存在，可以修改文件的末次修改日期。</li></ul><h2 id="1-2-mkdir"><a href="#1-2-mkdir" class="headerlink" title="1.2 mkdir"></a>1.2 mkdir</h2><ul><li>创建一个新的目录</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><blockquote><p>新建目录的名称不能与当前目录中已有的目录或文件夹同名。</p></blockquote><h2 id="1-3-rm"><a href="#1-3-rm" class="headerlink" title="1.3 rm"></a>1.3 rm</h2><ul><li>删除文件或目录</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，删除文件夹时必须加此参数</td></tr></tbody></table><p><strong>注意！</strong>不要使用rm  -rf  /* 命令！！！在虚拟机里面可以试试，然后重装。</p><h1 id="02-拷贝和移动文件"><a href="#02-拷贝和移动文件" class="headerlink" title="02 拷贝和移动文件"></a>02 拷贝和移动文件</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>tree[目录名]</td><td>tree</td><td>以树形图列出文件目录结构</td></tr><tr><td>02</td><td>cp  源文件  目标文件</td><td>copy</td><td>复制文件或目录</td></tr><tr><td>03</td><td>mv  源文件  目标文件</td><td>move</td><td>移动文件或目录/文件或目录重命名</td></tr></tbody></table><h2 id="2-1-tree"><a href="#2-1-tree" class="headerlink" title="2.1 tree"></a>2.1 tree</h2><ul><li><code>tree</code>命令可以以树形图列出文件目录结构</li><li><code>tree ~</code> <code>tree /</code></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>只显示目录</td></tr></tbody></table><h2 id="2-2-cp"><a href="#2-2-cp" class="headerlink" title="2.2 cp"></a>2.2 cp</h2><ul><li><code>cp</code>命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的<code>copy</code>命令。</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>已经存在的目标文件直接覆盖，不会提示</td></tr><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。</td></tr></tbody></table><h2 id="2-3-mv"><a href="#2-3-mv" class="headerlink" title="2.3 mv"></a>2.3 mv</h2><ul><li><code>mv</code>命令可以用来移动文件或目录，也可以给文件或目录重命名。</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><h1 id="03-查看文件内容"><a href="#03-查看文件内容" class="headerlink" title="03 查看文件内容"></a>03 查看文件内容</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h2 id="3-1-cat"><a href="#3-1-cat" class="headerlink" title="3.1 cat"></a>3.1 cat</h2><ul><li><code>cat</code>命令可以用来查看文件内容、创建文本、文件合并、追加文本内容等功能</li><li><code>cat</code>会一次显示所有的内容，适合查看内容较少的文本文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对非空输出行编号</td></tr><tr><td>-n</td><td>对输出的所有行编号</td></tr></tbody></table><blockquote><p>Linux中还有一个<code>nl</code>的命令和<code>cat -b</code>的效果等价。</p></blockquote><h2 id="3-2-more"><a href="#3-2-more" class="headerlink" title="3.2 more"></a>3.2 more</h2><ul><li><code>more</code>命令可以用于分屏显示较多的文件内容，每次只显示一页内容</li><li>适合于查看内容较多的文本文件</li></ul><p>使用<code>more</code>的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一页</td></tr><tr><td>Enter</td><td>一次滚动手册的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索word字符串</td></tr></tbody></table><h2 id="3-3-grep"><a href="#3-3-grep" class="headerlink" title="3.3 grep"></a>3.3 grep</h2><ul><li>Linux系统中grep命令是一种强大的文本搜索工具</li><li>grep允许对文本文件进行模式查找，所谓模式查找，又被称为正则表达式</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>显示不包含匹配文本的所有行（相当于求反）</td></tr><tr><td>-i</td><td>忽略大小写</td></tr></tbody></table><ul><li>常用的两种模式查找</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜索以a开头的行</td></tr><tr><td>a$</td><td>行尾，搜索以a结束的行</td></tr></tbody></table><h1 id="04-其他"><a href="#04-其他" class="headerlink" title="04 其他"></a>04 其他</h1><h2 id="4-1-echo-文字内容"><a href="#4-1-echo-文字内容" class="headerlink" title="4.1 echo  文字内容"></a>4.1 echo  文字内容</h2><ul><li><code>echo</code>会在终端中显示参数指定的文字，通常会和重定向联合使用</li></ul><h2 id="4-2-重定向-gt-和-gt-gt"><a href="#4-2-重定向-gt-和-gt-gt" class="headerlink" title="4.2 重定向 &gt; 和 &gt;&gt;"></a>4.2 重定向 &gt; 和 &gt;&gt;</h2><ul><li>Linux允许将命令执行结果重定向到一个文件</li><li>将文本显示到终端上的内容 输出 / 追加到指定文件中</li></ul><p>注意：</p><ul><li><code>&gt;</code>表示输出，会覆盖文件原有的内容</li><li><code>&gt;&gt;</code>表示追加，会将内容追加到已有文件的末尾</li></ul><h2 id="4-3-管道"><a href="#4-3-管道" class="headerlink" title="4.3 管道 |"></a>4.3 管道 |</h2><ul><li>Linux允许将 <strong>一个命令的输出</strong> 可以<strong>通过</strong> 作为<strong>另一个命令的输入</strong></li><li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来。这里 | 的左右分为两端，左端塞东西（写），右端取东西（读）。</li></ul><p>常用的管道命令有：</p><ul><li><code>more</code>分屏显示内容</li><li><code>grep</code>在命令执行结果的基础上查询指定的文本</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;01-创建和删除操作&quot;&gt;&lt;a href=&quot;#01-创建和删除操作&quot; class=&quot;headerlink&quot; title=&quot;01 创建和删除操作&quot;&gt;&lt;/a&gt;01 创建和删除操作&lt;/h1&gt;&lt;h2 id=&quot;1-1-touch&quot;&gt;&lt;a href=&quot;#1-1-touch&quot; c
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【Linux基础】02-目录相关命令</title>
    <link href="https://codave.github.io/2019/03/21/%E3%80%90Linux%E5%9F%BA%E7%A1%80%E3%80%9102-%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://codave.github.io/2019/03/21/【Linux基础】02-目录相关命令/</id>
    <published>2019-03-21T11:54:41.000Z</published>
    <updated>2019-03-21T13:22:53.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-ls命令说明"><a href="#01-ls命令说明" class="headerlink" title="01 ls命令说明"></a>01 ls命令说明</h1><blockquote><p><strong>Linux下文件和目录的特点</strong></p><ul><li>Linux文件或目录名称最长可以有256个字符</li><li>以<code>.</code>开头的文件为隐藏文件，需要<code>-a</code>参数才能显示</li><li><code>.</code>代表当前目录</li><li><code>..</code>代表上一级目录</li><li><code>/</code>代表根目录</li><li><code>~</code>代表<strong>当前用户</strong>home目录</li></ul></blockquote><h2 id="1-1-ls常用选项"><a href="#1-1-ls常用选项" class="headerlink" title="1.1 ls常用选项"></a>1.1 ls常用选项</h2><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示指定目录下所有子目录与文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><h2 id="1-2-ls通配符的使用"><a href="#1-2-ls通配符的使用" class="headerlink" title="1.2 ls通配符的使用"></a>1.2 ls通配符的使用</h2><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数字字符</td></tr><tr><td>？</td><td>代表任意一个字符，至少一个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任意一个</td></tr><tr><td>[abc]</td><td>匹配a、b、c中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配从a 到 f 范围内的任意一个字符</td></tr></tbody></table><p>说明：这里是正则表达式的知识。</p><h1 id="02-切换目录"><a href="#02-切换目录" class="headerlink" title="02 切换目录"></a>02 切换目录</h1><h2 id="2-1-cd"><a href="#2-1-cd" class="headerlink" title="2.1 cd"></a>2.1 cd</h2><ul><li><code>cd</code>是<strong>change directory</strong>的简写，其作用是更改当前的工作目录。</li></ul><blockquote><p>注意：Linux所有的目录和文件名都是大小写敏感的。</p></blockquote><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的主目录（/home/用户目录）</td></tr><tr><td>cd ~</td><td>切换到当前用户的主目录（/home/用户目录）</td></tr><tr><td>cd .</td><td>保持在当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h2 id="2-2-相对路径和绝对路径"><a href="#2-2-相对路径和绝对路径" class="headerlink" title="2.2 相对路径和绝对路径"></a>2.2 相对路径和绝对路径</h2><ul><li><strong>相对路径</strong> 在输入路径时，最前面不是 / 或者 ~，表示相对当前目录所在的目录位置。</li><li><strong>绝对路径</strong> 在输入路径时，最前面是 / 或者 ~，表示从根目录 / 家目录开始的具体位置。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;01-ls命令说明&quot;&gt;&lt;a href=&quot;#01-ls命令说明&quot; class=&quot;headerlink&quot; title=&quot;01 ls命令说明&quot;&gt;&lt;/a&gt;01 ls命令说明&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Linux下文件和目录的特点&lt;/stron
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【Linux基础】01-Linux命令简介</title>
    <link href="https://codave.github.io/2019/03/21/%E3%80%90Linux%E5%9F%BA%E7%A1%80%E3%80%9101-Linux%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/"/>
    <id>https://codave.github.io/2019/03/21/【Linux基础】01-Linux命令简介/</id>
    <published>2019-03-21T09:45:45.000Z</published>
    <updated>2019-03-21T13:22:12.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-常用Linux命令的基本使用"><a href="#01-常用Linux命令的基本使用" class="headerlink" title="01 常用Linux命令的基本使用"></a>01 常用Linux命令的基本使用</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print work directory</td><td>查看当前文件夹路径</td></tr><tr><td>03</td><td>cd[目录名]</td><td>change directory</td><td>切换文件夹</td></tr><tr><td>04</td><td>touch[文件名]</td><td>touch</td><td>新建文件</td></tr><tr><td>05</td><td>mkdir[目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm[文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><blockquote><p><strong><em>小技巧</em></strong></p><ul><li><code>ctrl + shift + =</code><strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + -</code><strong>缩小</strong>终端窗口的字体显示 </li></ul></blockquote><h1 id="02-自动补全"><a href="#02-自动补全" class="headerlink" title="02 自动补全"></a>02 自动补全</h1><h2 id="2-1-自动补全"><a href="#2-1-自动补全" class="headerlink" title="2.1 自动补全"></a>2.1 自动补全</h2><p>在敲出<code>文件</code>/<code>目录</code>/<code>命令</code>的前几个字母之后，按下<code>tab</code>键</p><ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还有其他<code>文件</code>/<code>目录</code>/<code>命令</code>,再按一下<code>tab</code>键，系统会提示可能存在的命令。</li></ul><h2 id="2-2-曾经使用过的命令"><a href="#2-2-曾经使用过的命令" class="headerlink" title="2.2 曾经使用过的命令"></a>2.2 曾经使用过的命令</h2><ul><li>按<code>上</code>/<code>下</code>光标键可以在曾经使用的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按<code>ctrl + c</code></li></ul><h1 id="03-Linux终端命令格式"><a href="#03-Linux终端命令格式" class="headerlink" title="03 Linux终端命令格式"></a>03 Linux终端命令格式</h1><h2 id="3-1-终端命令格式"><a href="#3-1-终端命令格式" class="headerlink" title="3.1 终端命令格式"></a>3.1 终端命令格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command [-options] [parameter]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><code>command</code>：命令名，相应功能的英文单词或单词的缩写</li><li><code>[-options]</code>:选项，可用来对命令进行控制，也可以省略</li><li><code>parameter</code>:传给命令的参数，可以是<strong>零个、一个或者多个</strong></li></ul><h2 id="3-2-查阅命令帮助信息"><a href="#3-2-查阅命令帮助信息" class="headerlink" title="3.2 查阅命令帮助信息"></a>3.2 查阅命令帮助信息</h2><ul><li><p><strong>–help</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command --help</span><br></pre></td></tr></table></figure><p>说明：显示<code>command</code>命令的帮助信息</p></li><li><p><strong>man</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man command</span><br></pre></td></tr></table></figure><p>说明：查阅<code>command</code>命令的使用手册</p><blockquote><p><code>man</code>是manual的缩写，是Linux提供的一个手册，包含了绝大多数的命令、函数的详细使用说明</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;01-常用Linux命令的基本使用&quot;&gt;&lt;a href=&quot;#01-常用Linux命令的基本使用&quot; class=&quot;headerlink&quot; title=&quot;01 常用Linux命令的基本使用&quot;&gt;&lt;/a&gt;01 常用Linux命令的基本使用&lt;/h1&gt;&lt;table&gt;
&lt;thea
      
    
    </summary>
    
      <category term="Linux" scheme="https://codave.github.io/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="https://codave.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>少年时代的爱,不过是表演【选自意林】</title>
    <link href="https://codave.github.io/2019/01/30/%E5%B0%91%E5%B9%B4%E6%97%B6%E4%BB%A3%E7%9A%84%E7%88%B1,%E4%B8%8D%E8%BF%87%E6%98%AF%E8%A1%A8%E6%BC%94%E3%80%90%E9%80%89%E8%87%AA%E6%84%8F%E6%9E%97%E3%80%91/"/>
    <id>https://codave.github.io/2019/01/30/少年时代的爱,不过是表演【选自意林】/</id>
    <published>2019-01-30T14:59:37.000Z</published>
    <updated>2019-02-21T10:23:15.590Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;高中的时候，我曾经交往过一个女朋友。有一天我半夜从梦中醒来，突然无比的想她。那时候手机还没有像现在这样普及，我的思念自然无从寄托。在床上瞪了一会儿眼睛以后，我跳起来麻利地穿好衣服，出门去找她了。尽管第二天上早自习我就能够见到她。那时候我以为了方便学习的名义在外面自己租房住，所以也不会遇到宿管大爷这种阻碍，可以来一场说走就走。出了门才发现外面下着大雪，地上已经有着厚厚的积雪，天空中雪花还如筛灰一般落下。但心怀着爱情的炽热，我丝毫没觉得冷。北方下雪的冬夜格外寂静，此时已经是凌晨两点以后，街上没有一个行人，只有我自己踏在积雪上的声音格外清晰。我穿过那条横穿这个小县城的街道，来到我当时女朋友家的楼下。然而我什么都做不了，楼门紧锁，况且即使开着我也没勇气在半夜里去挑战她母亲的忍耐度。于是我在楼下冒着大雪站了一会儿，抽了一支烟，惆怅了一阵子之后，就顺道拐去了网吧……直到很久以后，时过境迁，妹子已经再无联系，而我也不是那能半夜扛住风雪的鸡血少年，我才领悟自己当时的心态。那不过是一种表演罢了，除了把自己感动一下，制造一点自己痴情的假象，一点意义都没有。在感情中，我们往往觉得自己掏心掏肺，所做所为能够感天动地，闻者伤心，见者叹息，为什么偏偏感动不了你？我们总是容易用一种自虐的方式制造出一种痴情的假象来使得自己站在感情的道德制高点上，获得一种畸形的满足感和安全感。其实无论是雪夜去对方家楼下站会儿或者是冒着大雨给她送一杯奶茶什么的，自己回想起来往往觉得如乔峰大战聚贤庄、关羽千里走单骑一样壮怀激烈，而对于对方来说，一杯奶茶就是一杯奶茶，无法承载起你想要在上面寄托的山崩地裂的情怀。少年的时候，总是迫不及待地将自己的满腔爱意表达出来，而结果往往是陷入表演之中而不自知。所以两个人的记忆才会出现偏差，那些你觉得刻骨铭心的过去，对方往往没有同样的感觉，甚至茫然不知。成长的标志就是懂得克制自己。克制自己的情绪，克制自己的表演欲，甚至克制自己的喜欢。少年时候，喜欢一个人恨不能把她变成自己身体的一部分，她刚说冷，我这边心里已经结冰了，她说难过，我立马如丧考妣，比她还难过，唯恐无法将自己的爱意表达出来。而事实上，谁也无法承担起另一个人的价值寄托，只有做一个独立、有价值的人，才能真正学会去爱另一个人。也千万不要尝试改变另一个人，这注定是徒劳的。做自己就好，爱情的真谛在于相互的吸引、志趣相投的同行，而不是追逐和依附。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;高中的时候，我曾经交往过一个女朋友。有一天我半夜从梦中醒来，突然无比的想她。那时候手机还没有像现在这样普及，我的思念自然无从寄托。在床上瞪了一会儿眼睛以后，我跳起来麻利地穿好衣服，出门去找她了。尽管第二天上早自习我就能够
      
    
    </summary>
    
      <category term="思考" scheme="https://codave.github.io/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="情感" scheme="https://codave.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>NTRU算法的分析</title>
    <link href="https://codave.github.io/2019/01/23/NTRU%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>https://codave.github.io/2019/01/23/NTRU算法的分析/</id>
    <published>2019-01-23T08:16:02.000Z</published>
    <updated>2019-02-21T11:07:19.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NTRU简述"><a href="#NTRU简述" class="headerlink" title="NTRU简述"></a>NTRU简述</h2><p>&#160; &#160; &#160; &#160;NTRU(Number Theory Research Unit)公开密钥体制是由美国布朗大学三位数学教授(Jeffrey Hoffstein,JillPipher,Joseph H.Silverman)发明的，其安全性是基于数论中在一个非常大的维数格中寻找一个很短向量的数学难题。相对于离散对数或大数分解等公开秘密体制来说，它有许多优势。在安全性方面，NTRU算法具有抵抗量子计算攻击的能力，而RSA和ECC算法是无法抵抗量子计算的。</p><h2 id="NTRU算法的描述"><a href="#NTRU算法的描述" class="headerlink" title="NTRU算法的描述"></a>NTRU算法的描述</h2><h3 id="NTRU算法的数论基础"><a href="#NTRU算法的数论基础" class="headerlink" title="NTRU算法的数论基础"></a>NTRU算法的数论基础</h3><p>&#160; &#160; &#160; &#160;设有整数环Z、整数N$ \geq$2，用R表示多项式截断环时，R可以写成：R=Z[X]/(X^N^-1)，对于任意的正整数q，令R _q_ 代表模q的多项式截断环时，R _q_可以写成：    </p><p>$$ R _q_ =(Z/ _q_ Z )[X]/(X ^N^ -1) </p><p>​    可以证明当q时素数时，R具有可逆性。</p><h3 id="NTRU算法的描述-1"><a href="#NTRU算法的描述-1" class="headerlink" title="NTRU算法的描述"></a>NTRU算法的描述</h3><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NTRU简述&quot;&gt;&lt;a href=&quot;#NTRU简述&quot; class=&quot;headerlink&quot; title=&quot;NTRU简述&quot;&gt;&lt;/a&gt;NTRU简述&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;NTRU(Number Theory Research
      
    
    </summary>
    
      <category term="密码学" scheme="https://codave.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="NTRU" scheme="https://codave.github.io/tags/NTRU/"/>
    
  </entry>
  
  <entry>
    <title>如何在Hexo博客中添加网易云音乐播放器</title>
    <link href="https://codave.github.io/2019/01/23/%E5%A6%82%E4%BD%95%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://codave.github.io/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/</id>
    <published>2019-01-23T05:49:33.000Z</published>
    <updated>2019-01-30T15:57:57.461Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;在已经搭建好Github Page博客的前提下，我们可以在自己的博客中加上音乐播放器，那就非常完美啦！这里我选择网易云音乐。<a id="more"></a></p><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>&#160; &#160; &#160; &#160;首先，打开网易云音乐网站，登录自己的账号打开自己的歌单（歌单可以在PC端或者APP客户端上自由创建），也可以不登录直接搜索自己最近最喜欢的一首歌，点击后找到生成外链的链接，如下图：</p><p><img src="/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/1.jpg" alt="图1"></p><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>&#160; &#160; &#160; &#160;你将会看到如下信息，网易云提供两种方式，一种iframe标签嵌套，另一个是flash插件，两种实现都可以。这里选择第一个。</p><p><img src="/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/2.jpg" alt="图2"></p><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><p>&#160; &#160; &#160; &#160;接下来，可以根据自己需求选择尺寸。</p><p><img src="/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/3.jpg" alt="图3"></p><h2 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h2><p>&#160; &#160; &#160; &#160;然后，复制HTML代码，在根目录下的/theme/next/layout/_macro/sidebar.swig文件（侧边栏布局文件）中，选择你要添加播放器的位置，这里我选择添加在第136行处，并修改width=350，height=110。</p><p><img src="/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/4.jpg" alt="图4"></p><h2 id="步骤五"><a href="#步骤五" class="headerlink" title="步骤五"></a>步骤五</h2><p>&#160; &#160; &#160; &#160;大功告成！效果如下图:</p><p><img src="/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/5.jpg" alt="图5"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在已经搭建好Github Page博客的前提下，我们可以在自己的博客中加上音乐播放器，那就非常完美啦！这里我选择网易云音乐。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://codave.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://codave.github.io/tags/Hexo/"/>
    
      <category term="Github Page" scheme="https://codave.github.io/tags/Github-Page/"/>
    
  </entry>
  
  <entry>
    <title>如何在列表，字典，集合中根据条件筛选数据</title>
    <link href="https://codave.github.io/2019/01/17/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%88%97%E8%A1%A8%EF%BC%8C%E5%AD%97%E5%85%B8%EF%BC%8C%E9%9B%86%E5%90%88%E4%B8%AD%E6%A0%B9%E6%8D%AE%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>https://codave.github.io/2019/01/17/如何在列表，字典，集合中根据条件筛选数据/</id>
    <published>2019-01-17T08:09:25.000Z</published>
    <updated>2019-01-30T15:54:23.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><ol><li><p>过滤掉列表[3,9，-1，10,20，-2…]中的负数</p></li><li><p>筛选字典{‘LiLei’:79,’Jim’:88,’Lucy’:92…}中值高于90的项</p></li><li>筛选集合{77,89,32,20…}中能被3整除的元素</li></ol><p>对于以上问题，通常做法是通过迭代循环解决。比如问题1解决代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        res.append(x)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="在列表中根据条件筛选数据"><a href="#在列表中根据条件筛选数据" class="headerlink" title="在列表中根据条件筛选数据"></a>在列表中根据条件筛选数据</h2><ul><li><p>filter函数</p></li><li><p>列表解析</p><p>一.<strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该函数接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">data = [randint(<span class="number">-10</span>, <span class="number">10</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(data)</span><br><span class="line">res = filter(<span class="keyword">lambda</span> x: x &gt;= <span class="number">0</span>, data)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>注：<strong>lambda</strong>函数是匿名函数</p><p>二.列表解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x for x in data if x &gt;= 0]</span><br></pre></td></tr></table></figure></li></ul><h2 id="在字典中根据条件筛选数据"><a href="#在字典中根据条件筛选数据" class="headerlink" title="在字典中根据条件筛选数据"></a>在字典中根据条件筛选数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">d = &#123;x: randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>)&#125;</span><br><span class="line">print(d)</span><br><span class="line">res = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems() <span class="keyword">if</span> v &gt; <span class="number">90</span>&#125;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="在集合中根据条件筛选数据"><a href="#在集合中根据条件筛选数据" class="headerlink" title="在集合中根据条件筛选数据"></a>在集合中根据条件筛选数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [randint(<span class="number">-10</span>, <span class="number">10</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">s = set(data)</span><br><span class="line">res = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> s <span class="keyword">if</span> x%<span class="number">3</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实际案例&quot;&gt;&lt;a href=&quot;#实际案例&quot; class=&quot;headerlink&quot; title=&quot;实际案例&quot;&gt;&lt;/a&gt;实际案例&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;过滤掉列表[3,9，-1，10,20，-2…]中的负数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;筛选字典{‘Li
      
    
    </summary>
    
      <category term="Python" scheme="https://codave.github.io/categories/Python/"/>
    
    
      <category term="filter" scheme="https://codave.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://codave.github.io/2018/10/19/hello-world/"/>
    <id>https://codave.github.io/2018/10/19/hello-world/</id>
    <published>2018-10-19T09:03:25.489Z</published>
    <updated>2018-10-22T04:12:17.539Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
