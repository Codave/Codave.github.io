{"meta":{"title":"未来可期","subtitle":"技术博客","description":"不负过往，不惧未来。","author":"Codave","url":"https://codave.github.io"},"pages":[{"title":"关于","date":"2018-10-20T06:55:15.000Z","updated":"2019-01-23T08:11:17.850Z","comments":true,"path":"about/index.html","permalink":"https://codave.github.io/about/index.html","excerpt":"","text":"“人永远都无法知道自己该要什么，因为人只能活一次，既不能拿它跟前世相比，也不能在来生加以修正。没有任何方法可以检验哪种抉择是好的，因为不存在任何比较。一切都是马上经历，仅此一次，不能准备。”"},{"title":"标签","date":"2018-10-20T06:48:56.000Z","updated":"2018-10-21T01:42:10.598Z","comments":true,"path":"tags/index.html","permalink":"https://codave.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-10-20T06:50:31.000Z","updated":"2018-10-21T01:41:51.465Z","comments":true,"path":"categories/index.html","permalink":"https://codave.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Python语法基础04-字符串","slug":"Python语法基础04-字符串","date":"2019-03-23T04:22:58.000Z","updated":"2019-03-23T04:34:53.631Z","comments":true,"path":"2019/03/23/Python语法基础04-字符串/","link":"","permalink":"https://codave.github.io/2019/03/23/Python语法基础04-字符串/","excerpt":"","text":"04. 字符串4.1 字符串的定义 字符串 就是 一串字符，是编程语言中表示文本的数据类型 在 Python 中可以使用 一对双引号 &quot; 或者 一对单引号 &#39; 定义一个字符串 虽然可以使用 \\&quot; 或者 \\&#39; 做字符串的转义，但是在实际开发中： 如果字符串内部需要使用 &quot;，可以使用 &#39; 定义字符串 如果字符串内部需要使用 &#39;，可以使用 &quot; 定义字符串 可以使用 索引 获取一个字符串中 指定位置的字符，索引计数从 0 开始 也可以使用 for 循环遍历 字符串中每一个字符 大多数编程语言都是用 &quot; 来定义字符串 1234string = \"Hello Python\"for c in string: print(c) 4.2 字符串的常用操作 在 ipython3 中定义一个 字符串，例如：hello_str = &quot;&quot; 输入 hello_str. 按下 TAB 键，ipython 会提示 字符串 能够使用的 方法 如下： 12345678910111213141516In [1]: hello_str.hello_str.capitalize hello_str.isidentifier hello_str.rindexhello_str.casefold hello_str.islower hello_str.rjusthello_str.center hello_str.isnumeric hello_str.rpartitionhello_str.count hello_str.isprintable hello_str.rsplithello_str.encode hello_str.isspace hello_str.rstriphello_str.endswith hello_str.istitle hello_str.splithello_str.expandtabs hello_str.isupper hello_str.splitlineshello_str.find hello_str.join hello_str.startswithhello_str.format hello_str.ljust hello_str.striphello_str.format_map hello_str.lower hello_str.swapcasehello_str.index hello_str.lstrip hello_str.titlehello_str.isalnum hello_str.maketrans hello_str.translatehello_str.isalpha hello_str.partition hello_str.upperhello_str.isdecimal hello_str.replace hello_str.zfillhello_str.isdigit hello_str.rfind 提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！ 1) 判断类型 - 9 方法 说明 string.isspace() 如果 string 中只包含空格，则返回 True string.isalnum() 如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True string.isalpha() 如果 string 至少有一个字符并且所有字符都是字母则返回 True string.isdecimal() 如果 string 只包含数字则返回 True，全角数字 string.isdigit() 如果 string 只包含数字则返回 True，全角数字、⑴、\\u00b2 string.isnumeric() 如果 string 只包含数字则返回 True，全角数字，汉字数字 string.istitle() 如果 string 是标题化的(每个单词的首字母大写)则返回 True string.islower() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True string.isupper() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True 2) 查找和替换 - 7 方法 说明 string.startswith(str) 检查字符串是否是以 str 开头，是则返回 True string.endswith(str) 检查字符串是否是以 str 结束，是则返回 True string.find(str, start=0, end=len(string)) 检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 -1 string.rfind(str, start=0, end=len(string)) 类似于 find()，不过是从右边开始查找 string.index(str, start=0, end=len(string)) 跟 find() 方法类似，不过如果 str 不在 string 会报错 string.rindex(str, start=0, end=len(string)) 类似于 index()，不过是从右边开始 string.replace(old_str, new_str, num=string.count(old)) 把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次 3) 大小写转换 - 5 方法 说明 string.capitalize() 把字符串的第一个字符大写 string.title() 把字符串的每个单词首字母大写 string.lower() 转换 string 中所有大写字符为小写 string.upper() 转换 string 中的小写字母为大写 string.swapcase() 翻转 string 中的大小写 4) 文本对齐 - 3 方法 说明 string.ljust(width) 返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串 string.rjust(width) 返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串 string.center(width) 返回一个原字符串居中，并使用空格填充至长度 width 的新字符串 5) 去除空白字符 - 3 方法 说明 string.lstrip() 截掉 string 左边（开始）的空白字符 string.rstrip() 截掉 string 右边（末尾）的空白字符 string.strip() 截掉 string 左右两边的空白字符 6) 拆分和连接 - 5 方法 说明 string.partition(str) 把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面) string.rpartition(str) 类似于 partition() 方法，不过是从右边开始查找 string.split(str=””, num) 以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\\r’, ‘\\t’, ‘\\n’ 和空格 string.splitlines() 按照行(‘\\r’, ‘\\n’, ‘\\r\\n’)分隔，返回一个包含各行作为元素的列表 string.join(seq) 以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串 4.3 字符串的切片 切片 方法适用于 字符串、列表、元组 切片 使用 索引值 来限定范围，从一个大的 字符串 中 切出 小的 字符串 列表 和 元组 都是 有序 的集合，都能够 通过索引值 获取到对应的数据 字典 是一个 无序 的集合，是使用 键值对 保存数据 1字符串[开始索引:结束索引:步长] 注意： 指定的区间属于 左闭右开 型 [开始索引, 结束索引) =&gt; 开始索引 &gt;= 范围 &lt; 结束索引 从 起始 位开始，到 结束位的前一位 结束（不包含结束位本身) 从头开始，开始索引 数字可以省略，冒号不能省略 到末尾结束，结束索引 数字可以省略，冒号不能省略 步长默认为 1，如果连续切片，数字和冒号都可以省略 索引的顺序和倒序 在 Python 中不仅支持 顺序索引，同时还支持 倒序索引 所谓倒序索引就是 从右向左 计算索引 最右边的索引值是 -1，依次递减 演练需求 截取从 2 ~ 5 位置 的字符串 截取从 2 ~ 末尾 的字符串 截取从 开始 ~ 5 位置 的字符串 截取完整的字符串 从开始位置，每隔一个字符截取字符串 从索引 1 开始，每隔一个取一个 截取从 2 ~ 末尾 - 1 的字符串 截取字符串末尾两个字符 字符串的逆序（面试题） 答案 1234567891011121314151617181920212223242526272829303132num_str = &quot;0123456789&quot;# 1. 截取从 2 ~ 5 位置 的字符串print(num_str[2:6])# 2. 截取从 2 ~ `末尾` 的字符串print(num_str[2:])# 3. 截取从 `开始` ~ 5 位置 的字符串print(num_str[:6])# 4. 截取完整的字符串print(num_str[:])# 5. 从开始位置，每隔一个字符截取字符串print(num_str[::2])# 6. 从索引 1 开始，每隔一个取一个print(num_str[1::2])# 倒序切片# -1 表示倒数第一个字符print(num_str[-1])# 7. 截取从 2 ~ `末尾 - 1` 的字符串print(num_str[2:-1])# 8. 截取字符串末尾两个字符print(num_str[-2:])# 9. 字符串的逆序（面试题）print(num_str[::-1])","categories":[],"tags":[]},{"title":"Python语法基础03-字典","slug":"Python语法基础03-字典","date":"2019-03-23T04:22:05.000Z","updated":"2019-03-23T04:33:55.915Z","comments":true,"path":"2019/03/23/Python语法基础03-字典/","link":"","permalink":"https://codave.github.io/2019/03/23/Python语法基础03-字典/","excerpt":"","text":"03. 字典3.1 字典的定义 dictionary（字典） 是 除列表以外 Python 之中 最灵活 的数据类型 字典同样可以用来 存储多个数据 通常用于存储 描述一个 物体 的相关信息 和列表的区别 列表 是 有序 的对象集合 字典 是 无序 的对象集合 字典用 {} 定义 字典使用 键值对 存储数据，键值对之间使用 , 分隔 键 key 是索引 值 value 是数据 键 和 值 之间使用 : 分隔 键必须是唯一的 值 可以取任何数据类型，但 键 只能使用 字符串、数字或 元组 1234xiaoming = &#123;\"name\": \"小明\", \"age\": 18, \"gender\": True, \"height\": 1.75&#125; 3.2 字典常用操作 在 ipython3 中定义一个 字典，例如：xiaoming = {} 输入 xiaoming. 按下 TAB 键，ipython 会提示 字典 能够使用的函数如下： 12345In [1]: xiaoming.xiaoming.clear xiaoming.items xiaoming.setdefaultxiaoming.copy xiaoming.keys xiaoming.updatexiaoming.fromkeys xiaoming.pop xiaoming.valuesxiaoming.get xiaoming.popitem 有关 字典 的 常用操作 可以参照上图练习 3.3 循环遍历 遍历 就是 依次 从 字典 中获取所有键值对 1234# for 循环内部使用的 `key 的变量` in 字典for k in xiaoming: print(\"%s: %s\" % (k, xiaoming[k])) 提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多 3.4 应用场景 尽管可以使用 for in 遍历 字典 但是在开发中，更多的应用场景是： 使用 多个键值对，存储 描述一个 物体 的相关信息 —— 描述更复杂的数据信息 将 多个字典 放在 一个列表 中，再进行遍历，在循环体内部针对每一个字典进行 相同的处理 1234567card_list = [&#123;\"name\": \"张三\", \"qq\": \"12345\", \"phone\": \"110\"&#125;, &#123;\"name\": \"李四\", \"qq\": \"54321\", \"phone\": \"10086\"&#125; ]","categories":[{"name":"Linux","slug":"Linux","permalink":"https://codave.github.io/categories/Linux/"}],"tags":[{"name":"dict","slug":"dict","permalink":"https://codave.github.io/tags/dict/"}]},{"title":"Python语法基础02-元组","slug":"Python语法基础02-元组","date":"2019-03-23T04:20:51.000Z","updated":"2019-03-23T04:33:18.033Z","comments":true,"path":"2019/03/23/Python语法基础02-元组/","link":"","permalink":"https://codave.github.io/2019/03/23/Python语法基础02-元组/","excerpt":"","text":"02. 元组2.1 元组的定义 Tuple（元组）与列表类似，不同之处在于元组的 元素不能修改 元组 表示多个元素组成的序列 元组 在 Python 开发中，有特定的应用场景 用于存储 一串 信息，数据 之间使用 , 分隔 元组用 () 定义 元组的 索引 从 0 开始 索引 就是数据在 元组 中的位置编号 1info_tuple = (\"zhangsan\", 18, 1.75) 创建空元组1info_tuple = () 元组中 只包含一个元素 时，需要 在元素后面添加逗号1info_tuple = (50, ) 2.2 元组常用操作 在 ipython3 中定义一个 元组，例如：info = () 输入 info. 按下 TAB 键，ipython 会提示 元组 能够使用的函数如下： 1info.count info.index 有关 元组 的 常用操作 可以参照上图练习 2.3 循环遍历 取值 就是从 元组 中获取存储在指定位置的数据 遍历 就是 从头到尾 依次 从 元组 中获取数据 12345# for 循环内部使用的变量 in 元组for item in info: 循环内部针对元组元素进行操作 print(item) 在 Python 中，可以使用 for 循环遍历所有非数字型类型的变量：列表、元组、字典 以及 字符串 提示：在实际开发中，除非 能够确认元组中的数据类型，否则针对元组的循环遍历需求并不是很多 2.4 应用场景 尽管可以使用 for in 遍历 元组 但是在开发中，更多的应用场景是： 函数的 参数 和 返回值，一个函数可以接收 任意多个参数，或者 一次返回多个数据 有关 函数的参数 和 返回值，在后续 函数高级 给大家介绍 格式字符串，格式化字符串后面的 () 本质上就是一个元组 让列表不可以被修改，以保护数据安全 123info = (\"zhangsan\", 18)print(\"%s 的年龄是 %d\" % info) 元组和列表之间的转换 使用 list 函数可以把元组转换成列表 1list(元组) 使用 tuple 函数可以把列表转换成元组 1tuple(列表)","categories":[{"name":"Linux","slug":"Linux","permalink":"https://codave.github.io/categories/Linux/"}],"tags":[{"name":"tuple","slug":"tuple","permalink":"https://codave.github.io/tags/tuple/"}]},{"title":"Python语法基础01-列表","slug":"Python语法基础01-列表","date":"2019-03-22T13:07:49.000Z","updated":"2019-03-23T04:13:18.356Z","comments":true,"path":"2019/03/22/Python语法基础01-列表/","link":"","permalink":"https://codave.github.io/2019/03/22/Python语法基础01-列表/","excerpt":"","text":"知识点提要 Python 中数据类型可以分为 数字型 和 非数字型 数字型 整型 (int) 浮点型（float） 布尔型（bool） 真 True 非 0 数 —— 非零即真 假 False 0 复数型 (complex) 主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题 非数字型 字符串 列表 元组 字典 在 Python 中，所有 非数字型变量 都支持以下特点： 都是一个 序列 sequence，也可以理解为 容器 取值 [] 遍历 for in 计算长度、最大/最小值、比较、删除 链接 + 和 重复 * 切片 01. 列表1.1 列表的定义 List（列表） 是 Python 中使用 最频繁 的数据类型，在其他语言中通常叫做 数组 专门用于存储 一串 信息 列表用 [] 定义，数据 之间使用 , 分隔 列表的 索引 从 0 开始 索引 就是数据在 列表 中的位置编号，索引 又可以被称为 下标 注意：从列表中取值时，如果 超出索引范围，程序会报错 1name_list = [\"zhangsan\", \"lisi\", \"wangwu\"] 1.2 列表常用操作 在 ipython3 中定义一个 列表，例如：name_list = [] 输入 name_list. 按下 TAB 键，ipython 会提示 列表 能够使用的 方法 如下： 1234In [1]: name_list.name_list.append name_list.count name_list.insert name_list.reversename_list.clear name_list.extend name_list.pop name_list.sortname_list.copy name_list.index name_list.remove 序号 分类 关键字 / 函数 / 方法 说明 1 增加 列表.insert(索引, 数据) 在指定位置插入数据 列表.append(数据) 在末尾追加数据 列表.extend(列表2) 将列表2 的数据追加到列表 2 修改 列表[索引] = 数据 修改指定索引的数据 3 删除 del 列表[索引] 删除指定索引的数据 列表.remove[数据] 删除第一个出现的指定数据 列表.pop 删除末尾数据 列表.pop(索引) 删除指定索引数据 列表.clear 清空列表 4 统计 len(列表) 列表长度 列表.count(数据) 数据在列表中出现的次数 5 排序 列表.sort() 升序排序 列表.sort(reverse=True) 降序排序 列表.reverse() 逆序、反转 del 关键字（科普） 使用 del 关键字(delete) 同样可以删除列表中元素 del 关键字本质上是用来 将一个变量从内存中删除的 如果使用 del 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了 1del name_list[1] 在日常开发中，要从列表删除数据，建议 使用列表提供的方法 关键字、函数和方法（科普） 关键字 是 Python 内置的、具有特殊意义的标识符 123In [1]: import keywordIn [2]: print(keyword.kwlist)In [3]: print(len(keyword.kwlist)) 关键字后面不需要使用括号 函数 封装了独立功能，可以直接调用 1函数名(参数) 函数需要死记硬背 方法 和函数类似，同样是封装了独立的功能 方法 需要通过 对象 来调用，表示针对这个 对象 要做的操作 1对象.方法名(参数) 在变量后面输入 .，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多 1.3 循环遍历 遍历 就是 从头到尾 依次 从 列表 中获取数据 在 循环体内部 针对 每一个元素，执行相同的操作 在 Python 中为了提高列表的遍历效率，专门提供的 迭代 iteration 遍历 使用 for 就能够实现迭代遍历 12345# for 循环内部使用的变量 in 列表for name in name_list: #循环内部针对列表元素进行操作 print(name) 1.4 应用场景 尽管 Python 的 列表 中可以 存储不同类型的数据 但是在开发中，更多的应用场景是： 列表 存储相同类型的数据 通过 迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作","categories":[{"name":"Python","slug":"Python","permalink":"https://codave.github.io/categories/Python/"}],"tags":[{"name":"list","slug":"list","permalink":"https://codave.github.io/tags/list/"}]},{"title":"【Linux基础】04-远程管理命令","slug":"【Linux基础】04-远程管理命令","date":"2019-03-21T13:14:25.000Z","updated":"2019-03-22T13:47:23.174Z","comments":true,"path":"2019/03/21/【Linux基础】04-远程管理命令/","link":"","permalink":"https://codave.github.io/2019/03/21/【Linux基础】04-远程管理命令/","excerpt":"","text":"","categories":[{"name":"linux","slug":"linux","permalink":"https://codave.github.io/categories/linux/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://codave.github.io/tags/Linux基础/"}]},{"title":"【Linux基础】03-文件相关命令","slug":"【Linux基础】03-文件相关命令","date":"2019-03-21T12:53:42.000Z","updated":"2019-03-21T14:42:37.696Z","comments":true,"path":"2019/03/21/【Linux基础】03-文件相关命令/","link":"","permalink":"https://codave.github.io/2019/03/21/【Linux基础】03-文件相关命令/","excerpt":"","text":"01 创建和删除操作1.1 touch 如果文件不存在，可以创建一个空白文件。 如果文件已经存在，可以修改文件的末次修改日期。 1.2 mkdir 创建一个新的目录 选项 含义 -p 可以递归创建目录 新建目录的名称不能与当前目录中已有的目录或文件夹同名。 1.3 rm 删除文件或目录 参数 含义 -f 强制删除，忽略不存在的文件，无需提示 -r 递归地删除目录下的内容，删除文件夹时必须加此参数 注意！不要使用rm -rf /* 命令！！！在虚拟机里面可以试试，然后重装。 02 拷贝和移动文件 序号 命令 对应英文 作用 01 tree[目录名] tree 以树形图列出文件目录结构 02 cp 源文件 目标文件 copy 复制文件或目录 03 mv 源文件 目标文件 move 移动文件或目录/文件或目录重命名 2.1 tree tree命令可以以树形图列出文件目录结构 tree ~ tree / 选项 含义 -d 只显示目录 2.2 cp cp命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的copy命令。 选项 含义 -r 已经存在的目标文件直接覆盖，不会提示 -i 覆盖文件前提示 -r 若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。 2.3 mv mv命令可以用来移动文件或目录，也可以给文件或目录重命名。 选项 含义 -i 覆盖文件前提示 03 查看文件内容 序号 命令 对应英文 作用 01 cat 文件名 concatenate 查看文件内容、创建文件、文件合并、追加文件内容等功能 02 more 文件名 more 分屏显示文件内容 03 grep 搜索文本文件名 grep 搜索文本文件内容 3.1 cat cat命令可以用来查看文件内容、创建文本、文件合并、追加文本内容等功能 cat会一次显示所有的内容，适合查看内容较少的文本文件 选项 含义 -b 对非空输出行编号 -n 对输出的所有行编号 Linux中还有一个nl的命令和cat -b的效果等价。 3.2 more more命令可以用于分屏显示较多的文件内容，每次只显示一页内容 适合于查看内容较多的文本文件 使用more的操作键： 操作键 功能 空格键 显示手册页的下一页 Enter 一次滚动手册的一行 b 回滚一屏 f 前滚一屏 q 退出 /word 搜索word字符串 3.3 grep Linux系统中grep命令是一种强大的文本搜索工具 grep允许对文本文件进行模式查找，所谓模式查找，又被称为正则表达式 选项 含义 -n 显示匹配行及行号 -v 显示不包含匹配文本的所有行（相当于求反） -i 忽略大小写 常用的两种模式查找 参数 含义 ^a 行首，搜索以a开头的行 a$ 行尾，搜索以a结束的行 04 其他4.1 echo 文字内容 echo会在终端中显示参数指定的文字，通常会和重定向联合使用 4.2 重定向 &gt; 和 &gt;&gt; Linux允许将命令执行结果重定向到一个文件 将文本显示到终端上的内容 输出 / 追加到指定文件中 注意： &gt;表示输出，会覆盖文件原有的内容 &gt;&gt;表示追加，会将内容追加到已有文件的末尾 4.3 管道 | Linux允许将 一个命令的输出 可以通过 作为另一个命令的输入 可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来。这里 | 的左右分为两端，左端塞东西（写），右端取东西（读）。 常用的管道命令有： more分屏显示内容 grep在命令执行结果的基础上查询指定的文本","categories":[{"name":"Linux","slug":"Linux","permalink":"https://codave.github.io/categories/Linux/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://codave.github.io/tags/Linux基础/"}]},{"title":"【Linux基础】02-目录相关命令","slug":"【Linux基础】02-目录相关命令","date":"2019-03-21T11:54:41.000Z","updated":"2019-03-21T13:22:53.570Z","comments":true,"path":"2019/03/21/【Linux基础】02-目录相关命令/","link":"","permalink":"https://codave.github.io/2019/03/21/【Linux基础】02-目录相关命令/","excerpt":"","text":"01 ls命令说明 Linux下文件和目录的特点 Linux文件或目录名称最长可以有256个字符 以.开头的文件为隐藏文件，需要-a参数才能显示 .代表当前目录 ..代表上一级目录 /代表根目录 ~代表当前用户home目录 1.1 ls常用选项 参数 含义 -a 显示指定目录下所有子目录与文件 -l 以列表方式显示文件的详细信息 -h 配合 -l 以人性化的方式显示文件大小 1.2 ls通配符的使用 通配符 含义 * 代表任意个数字字符 ？ 代表任意一个字符，至少一个 [] 表示可以匹配字符组中的任意一个 [abc] 匹配a、b、c中的任意一个 [a-f] 匹配从a 到 f 范围内的任意一个字符 说明：这里是正则表达式的知识。 02 切换目录2.1 cd cd是change directory的简写，其作用是更改当前的工作目录。 注意：Linux所有的目录和文件名都是大小写敏感的。 命令 含义 cd 切换到当前用户的主目录（/home/用户目录） cd ~ 切换到当前用户的主目录（/home/用户目录） cd . 保持在当前目录不变 cd .. 切换到上级目录 cd - 可以在最近两次工作目录之间来回切换 2.2 相对路径和绝对路径 相对路径 在输入路径时，最前面不是 / 或者 ~，表示相对当前目录所在的目录位置。 绝对路径 在输入路径时，最前面是 / 或者 ~，表示从根目录 / 家目录开始的具体位置。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://codave.github.io/categories/Linux/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://codave.github.io/tags/Linux基础/"}]},{"title":"【Linux基础】01-Linux命令简介","slug":"【Linux基础】01-Linux命令简介","date":"2019-03-21T09:45:45.000Z","updated":"2019-03-21T13:22:12.138Z","comments":true,"path":"2019/03/21/【Linux基础】01-Linux命令简介/","link":"","permalink":"https://codave.github.io/2019/03/21/【Linux基础】01-Linux命令简介/","excerpt":"","text":"01 常用Linux命令的基本使用 序号 命令 对应英文 作用 01 ls list 查看当前文件夹下的内容 02 pwd print work directory 查看当前文件夹路径 03 cd[目录名] change directory 切换文件夹 04 touch[文件名] touch 新建文件 05 mkdir[目录名] make directory 创建目录 06 rm[文件名] remove 删除指定的文件名 07 clear clear 清屏 小技巧 ctrl + shift + =放大终端窗口的字体显示 ctrl + -缩小终端窗口的字体显示 02 自动补全2.1 自动补全在敲出文件/目录/命令的前几个字母之后，按下tab键 如果输入的没有歧义，系统会自动补全 如果还有其他文件/目录/命令,再按一下tab键，系统会提示可能存在的命令。 2.2 曾经使用过的命令 按上/下光标键可以在曾经使用的命令之间来回切换 如果想要退出选择，并且不想执行当前选中的命令，可以按ctrl + c 03 Linux终端命令格式3.1 终端命令格式1command [-options] [parameter] 说明： command：命令名，相应功能的英文单词或单词的缩写 [-options]:选项，可用来对命令进行控制，也可以省略 parameter:传给命令的参数，可以是零个、一个或者多个 3.2 查阅命令帮助信息 –help 1command --help 说明：显示command命令的帮助信息 man 1man command 说明：查阅command命令的使用手册 man是manual的缩写，是Linux提供的一个手册，包含了绝大多数的命令、函数的详细使用说明","categories":[{"name":"Linux","slug":"Linux","permalink":"https://codave.github.io/categories/Linux/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://codave.github.io/tags/Linux基础/"}]},{"title":"少年时代的爱,不过是表演【选自意林】","slug":"少年时代的爱,不过是表演【选自意林】","date":"2019-01-30T14:59:37.000Z","updated":"2019-02-21T10:23:15.590Z","comments":true,"path":"2019/01/30/少年时代的爱,不过是表演【选自意林】/","link":"","permalink":"https://codave.github.io/2019/01/30/少年时代的爱,不过是表演【选自意林】/","excerpt":"","text":"&#160; &#160; &#160; &#160;高中的时候，我曾经交往过一个女朋友。有一天我半夜从梦中醒来，突然无比的想她。那时候手机还没有像现在这样普及，我的思念自然无从寄托。在床上瞪了一会儿眼睛以后，我跳起来麻利地穿好衣服，出门去找她了。尽管第二天上早自习我就能够见到她。那时候我以为了方便学习的名义在外面自己租房住，所以也不会遇到宿管大爷这种阻碍，可以来一场说走就走。出了门才发现外面下着大雪，地上已经有着厚厚的积雪，天空中雪花还如筛灰一般落下。但心怀着爱情的炽热，我丝毫没觉得冷。北方下雪的冬夜格外寂静，此时已经是凌晨两点以后，街上没有一个行人，只有我自己踏在积雪上的声音格外清晰。我穿过那条横穿这个小县城的街道，来到我当时女朋友家的楼下。然而我什么都做不了，楼门紧锁，况且即使开着我也没勇气在半夜里去挑战她母亲的忍耐度。于是我在楼下冒着大雪站了一会儿，抽了一支烟，惆怅了一阵子之后，就顺道拐去了网吧……直到很久以后，时过境迁，妹子已经再无联系，而我也不是那能半夜扛住风雪的鸡血少年，我才领悟自己当时的心态。那不过是一种表演罢了，除了把自己感动一下，制造一点自己痴情的假象，一点意义都没有。在感情中，我们往往觉得自己掏心掏肺，所做所为能够感天动地，闻者伤心，见者叹息，为什么偏偏感动不了你？我们总是容易用一种自虐的方式制造出一种痴情的假象来使得自己站在感情的道德制高点上，获得一种畸形的满足感和安全感。其实无论是雪夜去对方家楼下站会儿或者是冒着大雨给她送一杯奶茶什么的，自己回想起来往往觉得如乔峰大战聚贤庄、关羽千里走单骑一样壮怀激烈，而对于对方来说，一杯奶茶就是一杯奶茶，无法承载起你想要在上面寄托的山崩地裂的情怀。少年的时候，总是迫不及待地将自己的满腔爱意表达出来，而结果往往是陷入表演之中而不自知。所以两个人的记忆才会出现偏差，那些你觉得刻骨铭心的过去，对方往往没有同样的感觉，甚至茫然不知。成长的标志就是懂得克制自己。克制自己的情绪，克制自己的表演欲，甚至克制自己的喜欢。少年时候，喜欢一个人恨不能把她变成自己身体的一部分，她刚说冷，我这边心里已经结冰了，她说难过，我立马如丧考妣，比她还难过，唯恐无法将自己的爱意表达出来。而事实上，谁也无法承担起另一个人的价值寄托，只有做一个独立、有价值的人，才能真正学会去爱另一个人。也千万不要尝试改变另一个人，这注定是徒劳的。做自己就好，爱情的真谛在于相互的吸引、志趣相投的同行，而不是追逐和依附。","categories":[{"name":"思考","slug":"思考","permalink":"https://codave.github.io/categories/思考/"}],"tags":[{"name":"情感","slug":"情感","permalink":"https://codave.github.io/tags/情感/"}]},{"title":"NTRU算法的分析","slug":"NTRU算法的分析","date":"2019-01-23T08:16:02.000Z","updated":"2019-02-21T11:07:19.823Z","comments":true,"path":"2019/01/23/NTRU算法的分析/","link":"","permalink":"https://codave.github.io/2019/01/23/NTRU算法的分析/","excerpt":"","text":"NTRU简述&#160; &#160; &#160; &#160;NTRU(Number Theory Research Unit)公开密钥体制是由美国布朗大学三位数学教授(Jeffrey Hoffstein,JillPipher,Joseph H.Silverman)发明的，其安全性是基于数论中在一个非常大的维数格中寻找一个很短向量的数学难题。相对于离散对数或大数分解等公开秘密体制来说，它有许多优势。在安全性方面，NTRU算法具有抵抗量子计算攻击的能力，而RSA和ECC算法是无法抵抗量子计算的。 NTRU算法的描述NTRU算法的数论基础&#160; &#160; &#160; &#160;设有整数环Z、整数N$ \\geq$2，用R表示多项式截断环时，R可以写成：R=Z[X]/(X^N^-1)，对于任意的正整数q，令R _q_ 代表模q的多项式截断环时，R _q_可以写成： $$ R _q_ =(Z/ _q_ Z )[X]/(X ^N^ -1) ​ 可以证明当q时素数时，R具有可逆性。 NTRU算法的描述​","categories":[{"name":"密码学","slug":"密码学","permalink":"https://codave.github.io/categories/密码学/"}],"tags":[{"name":"NTRU","slug":"NTRU","permalink":"https://codave.github.io/tags/NTRU/"}]},{"title":"如何在Hexo博客中添加网易云音乐播放器","slug":"如何在Hexo博客中添加网易云音乐播放器","date":"2019-01-23T05:49:33.000Z","updated":"2019-01-30T15:57:57.461Z","comments":true,"path":"2019/01/23/如何在Hexo博客中添加网易云音乐播放器/","link":"","permalink":"https://codave.github.io/2019/01/23/如何在Hexo博客中添加网易云音乐播放器/","excerpt":"&#160; &#160; &#160; &#160;在已经搭建好Github Page博客的前提下，我们可以在自己的博客中加上音乐播放器，那就非常完美啦！这里我选择网易云音乐。","text":"&#160; &#160; &#160; &#160;在已经搭建好Github Page博客的前提下，我们可以在自己的博客中加上音乐播放器，那就非常完美啦！这里我选择网易云音乐。 步骤一&#160; &#160; &#160; &#160;首先，打开网易云音乐网站，登录自己的账号打开自己的歌单（歌单可以在PC端或者APP客户端上自由创建），也可以不登录直接搜索自己最近最喜欢的一首歌，点击后找到生成外链的链接，如下图： 步骤二&#160; &#160; &#160; &#160;你将会看到如下信息，网易云提供两种方式，一种iframe标签嵌套，另一个是flash插件，两种实现都可以。这里选择第一个。 步骤三&#160; &#160; &#160; &#160;接下来，可以根据自己需求选择尺寸。 步骤四&#160; &#160; &#160; &#160;然后，复制HTML代码，在根目录下的/theme/next/layout/_macro/sidebar.swig文件（侧边栏布局文件）中，选择你要添加播放器的位置，这里我选择添加在第136行处，并修改width=350，height=110。 步骤五&#160; &#160; &#160; &#160;大功告成！效果如下图:","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://codave.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://codave.github.io/tags/Hexo/"},{"name":"Github Page","slug":"Github-Page","permalink":"https://codave.github.io/tags/Github-Page/"}]},{"title":"如何在列表，字典，集合中根据条件筛选数据","slug":"如何在列表，字典，集合中根据条件筛选数据","date":"2019-01-17T08:09:25.000Z","updated":"2019-01-30T15:54:23.526Z","comments":true,"path":"2019/01/17/如何在列表，字典，集合中根据条件筛选数据/","link":"","permalink":"https://codave.github.io/2019/01/17/如何在列表，字典，集合中根据条件筛选数据/","excerpt":"","text":"实际案例 过滤掉列表[3,9，-1，10,20，-2…]中的负数 筛选字典{‘LiLei’:79,’Jim’:88,’Lucy’:92…}中值高于90的项 筛选集合{77,89,32,20…}中能被3整除的元素 对于以上问题，通常做法是通过迭代循环解决。比如问题1解决代码如下： 123456data = [1,5,-3,-2,6,0,9]res = []for x in data: if x &gt;= 0: res.append(x)print(res) 在列表中根据条件筛选数据 filter函数 列表解析 一.filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。 该函数接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。 12345from random import randintdata = [randint(-10, 10) for _ in range(10)]print(data)res = filter(lambda x: x &gt;= 0, data)print(res) 注：lambda函数是匿名函数 二.列表解析 1[x for x in data if x &gt;= 0] 在字典中根据条件筛选数据12345from random import randintd = &#123;x: randint(60, 100) for x in range(1, 21)&#125;print(d)res = &#123;k: v for k, v in d.iteritems() if v &gt; 90&#125;print(res) 在集合中根据条件筛选数据1234data = [randint(-10, 10) for _ in range(10)]s = set(data)res = &#123;x for x in s if x%3 == 0&#125;print(res)","categories":[{"name":"Python","slug":"Python","permalink":"https://codave.github.io/categories/Python/"}],"tags":[{"name":"filter","slug":"filter","permalink":"https://codave.github.io/tags/filter/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-10-19T09:03:25.489Z","updated":"2018-10-22T04:12:17.539Z","comments":true,"path":"2018/10/19/hello-world/","link":"","permalink":"https://codave.github.io/2018/10/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}